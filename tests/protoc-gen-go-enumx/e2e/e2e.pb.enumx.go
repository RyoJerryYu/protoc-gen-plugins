//Code generated by protoc-gen-enumx. DO NOT EDIT.
//versions:
//- protoc-gen-enumx v1.0.0-beta
//- protoc 5.28.2
//source: e2e.proto

package e2e

import (
	constraints "golang.org/x/exp/constraints"
)

func (x Enum) Int() int {
	return int(x)
}

func (x Enum) Int64() int64 {
	return int64(x)
}

func (x Enum) Int32() int32 {
	return int32(x)
}

func (x Enum) UInt() uint {
	return uint(x)
}

func (x Enum) UInt64() uint64 {
	return uint64(x)
}

func (x Enum) UInt32() uint32 {
	return uint32(x)
}

// EnumFrom returns the Enum for the given integers, or the zero value if not found.
func EnumFrom[T constraints.Integer | constraints.Float](s T) Enum {
	return Enum(s)
}

// EnumFromValid is like EnumFrom, but returns an extra boolean value to check if the conversion is valid.
func EnumFromValid[T constraints.Integer | constraints.Float](s T) (Enum, bool) {
	_, valid := Enum_name[int32(s)]
	return Enum(s), valid
}

// EnumFromStr returns the Enum for the given string, or the zero value if not found.
func EnumFromStr(s string) Enum {
	return Enum(Enum_value[s])
}

// EnumFromValidStr is like EnumFromStr, but returns an extra boolean value to check if the conversion is valid.
func EnumFromValidStr(s string) (Enum, bool) {
	v, valid := Enum_value[s]
	return Enum(v), valid
}

var _Enum_all = []Enum{
	Enum_A,
	Enum_B,
	Enum_C,
}
var _Enum_allName = []string{
	"Enum_A",
	"Enum_B",
	"Enum_C",
}
var _Enum_allValue = []int32{
	0,
	1,
	2,
}

// EnumAll returns all the values of the Enum enum.
func EnumAll() []Enum {
	return _Enum_all[:]
}

// EnumAllName returns all the names of the Enum enum.
func EnumAllName() []string {
	return _Enum_allName[:]
}

// EnumAllValue returns all the values of the Enum enum.
func EnumAllValue() []int32 {
	return _Enum_allValue[:]
}
