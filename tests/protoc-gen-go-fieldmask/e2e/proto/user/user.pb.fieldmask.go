//Code generated by protoc-gen-go-fieldmask. DO NOT EDIT.
//versions:
//- protoc-gen-go-fieldmask v1.0.9
//- protoc 5.28.2
//source: proto/user/user.proto

package user

import (
	fieldmask "github.com/RyoJerryYu/protoc-gen-plugins/pkg/fieldmask"
)

// IUserFieldPath is the interface for the field path of User
type IUserFieldPath interface {
	String() string
	Id() string
	Name() string
	Icon() IIconFieldPath
	Password() IUserPasswordFieldPath
	CreatedAt() string
}

// userFieldPath is the implementation for the field path of User
type userFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewUserFieldPath creates a new userFieldPath
func NewUserFieldPath(fieldPath string) IUserFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return userFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x userFieldPath) String() string { return x.fieldPath }

func (x userFieldPath) Id() string           { return x.prefix + "id" }
func (x userFieldPath) Name() string         { return x.prefix + "name" }
func (x userFieldPath) Icon() IIconFieldPath { return NewIconFieldPath(x.prefix + "icon") }
func (x userFieldPath) Password() IUserPasswordFieldPath {
	return NewUserPasswordFieldPath(x.prefix + "password")
}
func (x userFieldPath) CreatedAt() string { return x.prefix + "created_at" }

// FieldPath returns the field path for User
func (x *User) FieldPath() IUserFieldPath {
	return NewUserFieldPath("")
}

// IIconFieldPath is the interface for the field path of Icon
type IIconFieldPath interface {
	String() string
	Id() string
	Url() string
	CreatedAt() fieldmask.ITimestampFieldPath
	Nested() IIcon_NestedFieldPath
	NestedAnother() string
}

// iconFieldPath is the implementation for the field path of Icon
type iconFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewIconFieldPath creates a new iconFieldPath
func NewIconFieldPath(fieldPath string) IIconFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return iconFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x iconFieldPath) String() string { return x.fieldPath }

func (x iconFieldPath) Id() string  { return x.prefix + "id" }
func (x iconFieldPath) Url() string { return x.prefix + "url" }
func (x iconFieldPath) CreatedAt() fieldmask.ITimestampFieldPath {
	return fieldmask.NewTimestampFieldPath(x.prefix + "created_at")
}
func (x iconFieldPath) Nested() IIcon_NestedFieldPath {
	return NewIcon_NestedFieldPath(x.prefix + "nested")
}
func (x iconFieldPath) NestedAnother() string { return x.prefix + "nested_another" }

// FieldPath returns the field path for Icon
func (x *Icon) FieldPath() IIconFieldPath {
	return NewIconFieldPath("")
}

// IIcon_NestedFieldPath is the interface for the field path of Icon_Nested
type IIcon_NestedFieldPath interface {
	String() string
	SomeField() string
}

// icon_NestedFieldPath is the implementation for the field path of Icon_Nested
type icon_NestedFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewIcon_NestedFieldPath creates a new icon_NestedFieldPath
func NewIcon_NestedFieldPath(fieldPath string) IIcon_NestedFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return icon_NestedFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x icon_NestedFieldPath) String() string { return x.fieldPath }

func (x icon_NestedFieldPath) SomeField() string { return x.prefix + "some_field" }

// FieldPath returns the field path for Icon_Nested
func (x *Icon_Nested) FieldPath() IIcon_NestedFieldPath {
	return NewIcon_NestedFieldPath("")
}
