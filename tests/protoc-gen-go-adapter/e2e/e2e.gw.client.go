// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: e2e.proto

package e2e

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	annotations "google.golang.org/genproto/googleapis/api/annotations"
	url "net/url"
)

// GreeterGatewayClient is the interface for Greeter service client.
type GreeterGatewayClient interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayHelloPost(context.Context, *HelloRequest) (*HelloReply, error)
	SayHttp(context.Context, *HelloRequest) (*annotations.Http, error)
}

func NewGreeterGatewayClient(c gateway.Client) GreeterGatewayClient {
	return &greeterGatewayClient{
		gwc: c,
	}
}

type greeterGatewayClient struct {
	gwc gateway.Client
}

func (c *greeterGatewayClient) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/example/echo")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[HelloReply](ctx, gwReq)
}

func (c *greeterGatewayClient) SayHelloPost(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/example/echo")
	gwReq.SetBody(req)
	return gateway.DoRequest[HelloReply](ctx, gwReq)
}

func (c *greeterGatewayClient) SayHttp(ctx context.Context, req *HelloRequest) (*annotations.Http, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/example/echo/http")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[annotations.Http](ctx, gwReq)
}
