// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CounterService_Increment_FullMethodName                           = "/main.CounterService/Increment"
	CounterService_StreamingIncrements_FullMethodName                 = "/main.CounterService/StreamingIncrements"
	CounterService_FailingIncrement_FullMethodName                    = "/main.CounterService/FailingIncrement"
	CounterService_EchoBinary_FullMethodName                          = "/main.CounterService/EchoBinary"
	CounterService_HTTPGet_FullMethodName                             = "/main.CounterService/HTTPGet"
	CounterService_HTTPPostWithNestedBodyPath_FullMethodName          = "/main.CounterService/HTTPPostWithNestedBodyPath"
	CounterService_HTTPPostWithStarBodyPath_FullMethodName            = "/main.CounterService/HTTPPostWithStarBodyPath"
	CounterService_HTTPPatch_FullMethodName                           = "/main.CounterService/HTTPPatch"
	CounterService_HTTPDelete_FullMethodName                          = "/main.CounterService/HTTPDelete"
	CounterService_HTTPDeleteWithParams_FullMethodName                = "/main.CounterService/HTTPDeleteWithParams"
	CounterService_ExternalMessage_FullMethodName                     = "/main.CounterService/ExternalMessage"
	CounterService_HTTPGetWithURLSearchParams_FullMethodName          = "/main.CounterService/HTTPGetWithURLSearchParams"
	CounterService_HTTPGetWithZeroValueURLSearchParams_FullMethodName = "/main.CounterService/HTTPGetWithZeroValueURLSearchParams"
	CounterService_HTTPGetWithOptionalFields_FullMethodName           = "/main.CounterService/HTTPGetWithOptionalFields"
)

// CounterServiceClient is the client API for CounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterServiceClient interface {
	Increment(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	StreamingIncrements(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamingResponse], error)
	FailingIncrement(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	EchoBinary(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*BinaryResponse, error)
	HTTPGet(ctx context.Context, in *HttpGetRequest, opts ...grpc.CallOption) (*HttpGetResponse, error)
	HTTPPostWithNestedBodyPath(ctx context.Context, in *HttpPostRequest, opts ...grpc.CallOption) (*HttpPostResponse, error)
	HTTPPostWithStarBodyPath(ctx context.Context, in *HttpPostRequest, opts ...grpc.CallOption) (*HttpPostResponse, error)
	HTTPPatch(ctx context.Context, in *HttpPatchRequest, opts ...grpc.CallOption) (*HttpPatchResponse, error)
	HTTPDelete(ctx context.Context, in *HttpDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HTTPDeleteWithParams(ctx context.Context, in *HttpDeleteWithParamsRequest, opts ...grpc.CallOption) (*HttpDeleteWithParamsResponse, error)
	ExternalMessage(ctx context.Context, in *ExternalRequest, opts ...grpc.CallOption) (*ExternalResponse, error)
	HTTPGetWithURLSearchParams(ctx context.Context, in *HTTPGetWithURLSearchParamsRequest, opts ...grpc.CallOption) (*HTTPGetWithURLSearchParamsResponse, error)
	HTTPGetWithZeroValueURLSearchParams(ctx context.Context, in *HTTPGetWithZeroValueURLSearchParamsRequest, opts ...grpc.CallOption) (*HTTPGetWithZeroValueURLSearchParamsResponse, error)
	HTTPGetWithOptionalFields(ctx context.Context, in *OptionalFieldsRequest, opts ...grpc.CallOption) (*OptionalFieldsResponse, error)
}

type counterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterServiceClient(cc grpc.ClientConnInterface) CounterServiceClient {
	return &counterServiceClient{cc}
}

func (c *counterServiceClient) Increment(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, CounterService_Increment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) StreamingIncrements(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CounterService_ServiceDesc.Streams[0], CounterService_StreamingIncrements_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRequest, StreamingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CounterService_StreamingIncrementsClient = grpc.ServerStreamingClient[StreamingResponse]

func (c *counterServiceClient) FailingIncrement(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, CounterService_FailingIncrement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) EchoBinary(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*BinaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryResponse)
	err := c.cc.Invoke(ctx, CounterService_EchoBinary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPGet(ctx context.Context, in *HttpGetRequest, opts ...grpc.CallOption) (*HttpGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HttpGetResponse)
	err := c.cc.Invoke(ctx, CounterService_HTTPGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPPostWithNestedBodyPath(ctx context.Context, in *HttpPostRequest, opts ...grpc.CallOption) (*HttpPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HttpPostResponse)
	err := c.cc.Invoke(ctx, CounterService_HTTPPostWithNestedBodyPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPPostWithStarBodyPath(ctx context.Context, in *HttpPostRequest, opts ...grpc.CallOption) (*HttpPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HttpPostResponse)
	err := c.cc.Invoke(ctx, CounterService_HTTPPostWithStarBodyPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPPatch(ctx context.Context, in *HttpPatchRequest, opts ...grpc.CallOption) (*HttpPatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HttpPatchResponse)
	err := c.cc.Invoke(ctx, CounterService_HTTPPatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPDelete(ctx context.Context, in *HttpDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CounterService_HTTPDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPDeleteWithParams(ctx context.Context, in *HttpDeleteWithParamsRequest, opts ...grpc.CallOption) (*HttpDeleteWithParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HttpDeleteWithParamsResponse)
	err := c.cc.Invoke(ctx, CounterService_HTTPDeleteWithParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) ExternalMessage(ctx context.Context, in *ExternalRequest, opts ...grpc.CallOption) (*ExternalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalResponse)
	err := c.cc.Invoke(ctx, CounterService_ExternalMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPGetWithURLSearchParams(ctx context.Context, in *HTTPGetWithURLSearchParamsRequest, opts ...grpc.CallOption) (*HTTPGetWithURLSearchParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPGetWithURLSearchParamsResponse)
	err := c.cc.Invoke(ctx, CounterService_HTTPGetWithURLSearchParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPGetWithZeroValueURLSearchParams(ctx context.Context, in *HTTPGetWithZeroValueURLSearchParamsRequest, opts ...grpc.CallOption) (*HTTPGetWithZeroValueURLSearchParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPGetWithZeroValueURLSearchParamsResponse)
	err := c.cc.Invoke(ctx, CounterService_HTTPGetWithZeroValueURLSearchParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) HTTPGetWithOptionalFields(ctx context.Context, in *OptionalFieldsRequest, opts ...grpc.CallOption) (*OptionalFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptionalFieldsResponse)
	err := c.cc.Invoke(ctx, CounterService_HTTPGetWithOptionalFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServiceServer is the server API for CounterService service.
// All implementations must embed UnimplementedCounterServiceServer
// for forward compatibility.
type CounterServiceServer interface {
	Increment(context.Context, *UnaryRequest) (*UnaryResponse, error)
	StreamingIncrements(*StreamingRequest, grpc.ServerStreamingServer[StreamingResponse]) error
	FailingIncrement(context.Context, *UnaryRequest) (*UnaryResponse, error)
	EchoBinary(context.Context, *BinaryRequest) (*BinaryResponse, error)
	HTTPGet(context.Context, *HttpGetRequest) (*HttpGetResponse, error)
	HTTPPostWithNestedBodyPath(context.Context, *HttpPostRequest) (*HttpPostResponse, error)
	HTTPPostWithStarBodyPath(context.Context, *HttpPostRequest) (*HttpPostResponse, error)
	HTTPPatch(context.Context, *HttpPatchRequest) (*HttpPatchResponse, error)
	HTTPDelete(context.Context, *HttpDeleteRequest) (*emptypb.Empty, error)
	HTTPDeleteWithParams(context.Context, *HttpDeleteWithParamsRequest) (*HttpDeleteWithParamsResponse, error)
	ExternalMessage(context.Context, *ExternalRequest) (*ExternalResponse, error)
	HTTPGetWithURLSearchParams(context.Context, *HTTPGetWithURLSearchParamsRequest) (*HTTPGetWithURLSearchParamsResponse, error)
	HTTPGetWithZeroValueURLSearchParams(context.Context, *HTTPGetWithZeroValueURLSearchParamsRequest) (*HTTPGetWithZeroValueURLSearchParamsResponse, error)
	HTTPGetWithOptionalFields(context.Context, *OptionalFieldsRequest) (*OptionalFieldsResponse, error)
	mustEmbedUnimplementedCounterServiceServer()
}

// UnimplementedCounterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCounterServiceServer struct{}

func (UnimplementedCounterServiceServer) Increment(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedCounterServiceServer) StreamingIncrements(*StreamingRequest, grpc.ServerStreamingServer[StreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingIncrements not implemented")
}
func (UnimplementedCounterServiceServer) FailingIncrement(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailingIncrement not implemented")
}
func (UnimplementedCounterServiceServer) EchoBinary(context.Context, *BinaryRequest) (*BinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoBinary not implemented")
}
func (UnimplementedCounterServiceServer) HTTPGet(context.Context, *HttpGetRequest) (*HttpGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPGet not implemented")
}
func (UnimplementedCounterServiceServer) HTTPPostWithNestedBodyPath(context.Context, *HttpPostRequest) (*HttpPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPPostWithNestedBodyPath not implemented")
}
func (UnimplementedCounterServiceServer) HTTPPostWithStarBodyPath(context.Context, *HttpPostRequest) (*HttpPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPPostWithStarBodyPath not implemented")
}
func (UnimplementedCounterServiceServer) HTTPPatch(context.Context, *HttpPatchRequest) (*HttpPatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPPatch not implemented")
}
func (UnimplementedCounterServiceServer) HTTPDelete(context.Context, *HttpDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPDelete not implemented")
}
func (UnimplementedCounterServiceServer) HTTPDeleteWithParams(context.Context, *HttpDeleteWithParamsRequest) (*HttpDeleteWithParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPDeleteWithParams not implemented")
}
func (UnimplementedCounterServiceServer) ExternalMessage(context.Context, *ExternalRequest) (*ExternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalMessage not implemented")
}
func (UnimplementedCounterServiceServer) HTTPGetWithURLSearchParams(context.Context, *HTTPGetWithURLSearchParamsRequest) (*HTTPGetWithURLSearchParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPGetWithURLSearchParams not implemented")
}
func (UnimplementedCounterServiceServer) HTTPGetWithZeroValueURLSearchParams(context.Context, *HTTPGetWithZeroValueURLSearchParamsRequest) (*HTTPGetWithZeroValueURLSearchParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPGetWithZeroValueURLSearchParams not implemented")
}
func (UnimplementedCounterServiceServer) HTTPGetWithOptionalFields(context.Context, *OptionalFieldsRequest) (*OptionalFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPGetWithOptionalFields not implemented")
}
func (UnimplementedCounterServiceServer) mustEmbedUnimplementedCounterServiceServer() {}
func (UnimplementedCounterServiceServer) testEmbeddedByValue()                        {}

// UnsafeCounterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServiceServer will
// result in compilation errors.
type UnsafeCounterServiceServer interface {
	mustEmbedUnimplementedCounterServiceServer()
}

func RegisterCounterServiceServer(s grpc.ServiceRegistrar, srv CounterServiceServer) {
	// If the following call pancis, it indicates UnimplementedCounterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CounterService_ServiceDesc, srv)
}

func _CounterService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_Increment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Increment(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_StreamingIncrements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CounterServiceServer).StreamingIncrements(m, &grpc.GenericServerStream[StreamingRequest, StreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CounterService_StreamingIncrementsServer = grpc.ServerStreamingServer[StreamingResponse]

func _CounterService_FailingIncrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).FailingIncrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_FailingIncrement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).FailingIncrement(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_EchoBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).EchoBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_EchoBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).EchoBinary(ctx, req.(*BinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPGet(ctx, req.(*HttpGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPPostWithNestedBodyPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPPostWithNestedBodyPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPPostWithNestedBodyPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPPostWithNestedBodyPath(ctx, req.(*HttpPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPPostWithStarBodyPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPPostWithStarBodyPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPPostWithStarBodyPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPPostWithStarBodyPath(ctx, req.(*HttpPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpPatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPPatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPPatch(ctx, req.(*HttpPatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPDelete(ctx, req.(*HttpDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPDeleteWithParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpDeleteWithParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPDeleteWithParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPDeleteWithParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPDeleteWithParams(ctx, req.(*HttpDeleteWithParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_ExternalMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).ExternalMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_ExternalMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).ExternalMessage(ctx, req.(*ExternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPGetWithURLSearchParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPGetWithURLSearchParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPGetWithURLSearchParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPGetWithURLSearchParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPGetWithURLSearchParams(ctx, req.(*HTTPGetWithURLSearchParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPGetWithZeroValueURLSearchParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPGetWithZeroValueURLSearchParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPGetWithZeroValueURLSearchParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPGetWithZeroValueURLSearchParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPGetWithZeroValueURLSearchParams(ctx, req.(*HTTPGetWithZeroValueURLSearchParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_HTTPGetWithOptionalFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionalFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).HTTPGetWithOptionalFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_HTTPGetWithOptionalFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).HTTPGetWithOptionalFields(ctx, req.(*OptionalFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CounterService_ServiceDesc is the grpc.ServiceDesc for CounterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CounterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.CounterService",
	HandlerType: (*CounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _CounterService_Increment_Handler,
		},
		{
			MethodName: "FailingIncrement",
			Handler:    _CounterService_FailingIncrement_Handler,
		},
		{
			MethodName: "EchoBinary",
			Handler:    _CounterService_EchoBinary_Handler,
		},
		{
			MethodName: "HTTPGet",
			Handler:    _CounterService_HTTPGet_Handler,
		},
		{
			MethodName: "HTTPPostWithNestedBodyPath",
			Handler:    _CounterService_HTTPPostWithNestedBodyPath_Handler,
		},
		{
			MethodName: "HTTPPostWithStarBodyPath",
			Handler:    _CounterService_HTTPPostWithStarBodyPath_Handler,
		},
		{
			MethodName: "HTTPPatch",
			Handler:    _CounterService_HTTPPatch_Handler,
		},
		{
			MethodName: "HTTPDelete",
			Handler:    _CounterService_HTTPDelete_Handler,
		},
		{
			MethodName: "HTTPDeleteWithParams",
			Handler:    _CounterService_HTTPDeleteWithParams_Handler,
		},
		{
			MethodName: "ExternalMessage",
			Handler:    _CounterService_ExternalMessage_Handler,
		},
		{
			MethodName: "HTTPGetWithURLSearchParams",
			Handler:    _CounterService_HTTPGetWithURLSearchParams_Handler,
		},
		{
			MethodName: "HTTPGetWithZeroValueURLSearchParams",
			Handler:    _CounterService_HTTPGetWithZeroValueURLSearchParams_Handler,
		},
		{
			MethodName: "HTTPGetWithOptionalFields",
			Handler:    _CounterService_HTTPGetWithOptionalFields_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingIncrements",
			Handler:       _CounterService_StreamingIncrements_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
