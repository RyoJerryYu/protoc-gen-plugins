// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: google/protobuf/descriptor.proto

/* eslint-disable */

export const protobufPackage = "google.protobuf";

/** The full set of known editions. */
export enum Edition {
  /** EDITION_UNKNOWN - A placeholder for an unknown edition value. */
  EDITION_UNKNOWN = "EDITION_UNKNOWN",
  /**
   * EDITION_LEGACY - A placeholder edition for specifying default behaviors *before* a feature
   * was first introduced.  This is effectively an "infinite past".
   */
  EDITION_LEGACY = "EDITION_LEGACY",
  /**
   * EDITION_PROTO2 - Legacy syntax "editions".  These pre-date editions, but behave much like
   * distinct editions.  These can't be used to specify the edition of proto
   * files, but feature definitions must supply proto2/proto3 defaults for
   * backwards compatibility.
   */
  EDITION_PROTO2 = "EDITION_PROTO2",
  EDITION_PROTO3 = "EDITION_PROTO3",
  /**
   * EDITION_2023 - Editions that have been released.  The specific values are arbitrary and
   * should not be depended on, but they will always be time-ordered for easy
   * comparison.
   */
  EDITION_2023 = "EDITION_2023",
  EDITION_2024 = "EDITION_2024",
  /**
   * EDITION_1_TEST_ONLY - Placeholder editions for testing feature resolution.  These should not be
   * used or relyed on outside of tests.
   */
  EDITION_1_TEST_ONLY = "EDITION_1_TEST_ONLY",
  EDITION_2_TEST_ONLY = "EDITION_2_TEST_ONLY",
  EDITION_99997_TEST_ONLY = "EDITION_99997_TEST_ONLY",
  EDITION_99998_TEST_ONLY = "EDITION_99998_TEST_ONLY",
  EDITION_99999_TEST_ONLY = "EDITION_99999_TEST_ONLY",
  /**
   * EDITION_MAX - Placeholder for specifying unbounded edition support.  This should only
   * ever be used by plugins that can expect to never require any changes to
   * support a new edition.
   */
  EDITION_MAX = "EDITION_MAX",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function editionFromJSON(object: any): Edition {
  switch (object) {
    case 0:
    case "EDITION_UNKNOWN":
      return Edition.EDITION_UNKNOWN;
    case 900:
    case "EDITION_LEGACY":
      return Edition.EDITION_LEGACY;
    case 998:
    case "EDITION_PROTO2":
      return Edition.EDITION_PROTO2;
    case 999:
    case "EDITION_PROTO3":
      return Edition.EDITION_PROTO3;
    case 1000:
    case "EDITION_2023":
      return Edition.EDITION_2023;
    case 1001:
    case "EDITION_2024":
      return Edition.EDITION_2024;
    case 1:
    case "EDITION_1_TEST_ONLY":
      return Edition.EDITION_1_TEST_ONLY;
    case 2:
    case "EDITION_2_TEST_ONLY":
      return Edition.EDITION_2_TEST_ONLY;
    case 99997:
    case "EDITION_99997_TEST_ONLY":
      return Edition.EDITION_99997_TEST_ONLY;
    case 99998:
    case "EDITION_99998_TEST_ONLY":
      return Edition.EDITION_99998_TEST_ONLY;
    case 99999:
    case "EDITION_99999_TEST_ONLY":
      return Edition.EDITION_99999_TEST_ONLY;
    case 2147483647:
    case "EDITION_MAX":
      return Edition.EDITION_MAX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Edition.UNRECOGNIZED;
  }
}

export function editionToJSON(object: Edition): string {
  switch (object) {
    case Edition.EDITION_UNKNOWN:
      return "EDITION_UNKNOWN";
    case Edition.EDITION_LEGACY:
      return "EDITION_LEGACY";
    case Edition.EDITION_PROTO2:
      return "EDITION_PROTO2";
    case Edition.EDITION_PROTO3:
      return "EDITION_PROTO3";
    case Edition.EDITION_2023:
      return "EDITION_2023";
    case Edition.EDITION_2024:
      return "EDITION_2024";
    case Edition.EDITION_1_TEST_ONLY:
      return "EDITION_1_TEST_ONLY";
    case Edition.EDITION_2_TEST_ONLY:
      return "EDITION_2_TEST_ONLY";
    case Edition.EDITION_99997_TEST_ONLY:
      return "EDITION_99997_TEST_ONLY";
    case Edition.EDITION_99998_TEST_ONLY:
      return "EDITION_99998_TEST_ONLY";
    case Edition.EDITION_99999_TEST_ONLY:
      return "EDITION_99999_TEST_ONLY";
    case Edition.EDITION_MAX:
      return "EDITION_MAX";
    case Edition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The protocol compiler can output a FileDescriptorSet containing the .proto
 * files it parses.
 */
export interface FileDescriptorSet {
  file: FileDescriptorProto[];
}

/** Describes a complete .proto file. */
export interface FileDescriptorProto {
  /** file name, relative to root of source tree */
  name?: string | undefined;
  /** e.g. "foo", "foo.bar", etc. */
  package?: string | undefined;
  /** Names of files imported by this file. */
  dependency: string[];
  /** Indexes of the public imported files in the dependency list above. */
  public_dependency: number[];
  /**
   * Indexes of the weak imported files in the dependency list.
   * For Google-internal migration only. Do not use.
   */
  weak_dependency: number[];
  /** All top-level definitions in this file. */
  message_type: DescriptorProto[];
  enum_type: EnumDescriptorProto[];
  service: ServiceDescriptorProto[];
  extension: FieldDescriptorProto[];
  options?: FileOptions | undefined;
  /**
   * This field contains optional information about the original source code.
   * You may safely remove this entire field without harming runtime
   * functionality of the descriptors -- the information is needed only by
   * development tools.
   */
  source_code_info?: SourceCodeInfo | undefined;
  /**
   * The syntax of the proto file.
   * The supported values are "proto2", "proto3", and "editions".
   *
   * If `edition` is present, this value must be "editions".
   */
  syntax?: string | undefined;
  /** The edition of the proto file. */
  edition?: Edition | undefined;
}

/** Describes a message type. */
export interface DescriptorProto {
  name?: string | undefined;
  field: FieldDescriptorProto[];
  extension: FieldDescriptorProto[];
  nested_type: DescriptorProto[];
  enum_type: EnumDescriptorProto[];
  extension_range: DescriptorProto_ExtensionRange[];
  oneof_decl: OneofDescriptorProto[];
  options?: MessageOptions | undefined;
  reserved_range: DescriptorProto_ReservedRange[];
  /**
   * Reserved field names, which may not be used by fields in the same message.
   * A given name may only be reserved once.
   */
  reserved_name: string[];
}

export interface DescriptorProto_ExtensionRange {
  /** Inclusive. */
  start?: number | undefined;
  /** Exclusive. */
  end?: number | undefined;
  options?: ExtensionRangeOptions | undefined;
}

/**
 * Range of reserved tag numbers. Reserved tag numbers may not be used by
 * fields or extension ranges in the same message. Reserved ranges may
 * not overlap.
 */
export interface DescriptorProto_ReservedRange {
  /** Inclusive. */
  start?: number | undefined;
  /** Exclusive. */
  end?: number | undefined;
}

export interface ExtensionRangeOptions {
  /** The parser stores options it doesn't recognize here. See above. */
  uninterpreted_option: UninterpretedOption[];
  /**
   * For external users: DO NOT USE. We are in the process of open sourcing
   * extension declaration and executing internal cleanups before it can be
   * used externally.
   */
  declaration: ExtensionRangeOptions_Declaration[];
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  /**
   * The verification state of the range.
   * TODO: flip the default to DECLARATION once all empty ranges
   * are marked as UNVERIFIED.
   */
  verification?: ExtensionRangeOptions_VerificationState | undefined;
}

/** The verification state of the extension range. */
export enum ExtensionRangeOptions_VerificationState {
  /** DECLARATION - All the extensions of the range must be declared. */
  DECLARATION = "DECLARATION",
  UNVERIFIED = "UNVERIFIED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function extensionRangeOptions_VerificationStateFromJSON(
  object: any,
): ExtensionRangeOptions_VerificationState {
  switch (object) {
    case 0:
    case "DECLARATION":
      return ExtensionRangeOptions_VerificationState.DECLARATION;
    case 1:
    case "UNVERIFIED":
      return ExtensionRangeOptions_VerificationState.UNVERIFIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExtensionRangeOptions_VerificationState.UNRECOGNIZED;
  }
}

export function extensionRangeOptions_VerificationStateToJSON(
  object: ExtensionRangeOptions_VerificationState,
): string {
  switch (object) {
    case ExtensionRangeOptions_VerificationState.DECLARATION:
      return "DECLARATION";
    case ExtensionRangeOptions_VerificationState.UNVERIFIED:
      return "UNVERIFIED";
    case ExtensionRangeOptions_VerificationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ExtensionRangeOptions_Declaration {
  /** The extension number declared within the extension range. */
  number?: number | undefined;
  /**
   * The fully-qualified name of the extension field. There must be a leading
   * dot in front of the full name.
   */
  full_name?: string | undefined;
  /**
   * The fully-qualified type name of the extension field. Unlike
   * Metadata.type, Declaration.type must have a leading dot for messages
   * and enums.
   */
  type?: string | undefined;
  /**
   * If true, indicates that the number is reserved in the extension range,
   * and any extension field with the number will fail to compile. Set this
   * when a declared extension field is deleted.
   */
  reserved?: boolean | undefined;
  /**
   * If true, indicates that the extension must be defined as repeated.
   * Otherwise the extension must be defined as optional.
   */
  repeated?: boolean | undefined;
}

/** Describes a field within a message. */
export interface FieldDescriptorProto {
  name?: string | undefined;
  number?: number | undefined;
  label?: FieldDescriptorProto_Label | undefined;
  /**
   * If type_name is set, this need not be set.  If both this and type_name
   * are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
   */
  type?: FieldDescriptorProto_Type | undefined;
  /**
   * For message and enum types, this is the name of the type.  If the name
   * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
   * rules are used to find the type (i.e. first the nested types within this
   * message are searched, then within the parent, on up to the root
   * namespace).
   */
  type_name?: string | undefined;
  /**
   * For extensions, this is the name of the type being extended.  It is
   * resolved in the same manner as type_name.
   */
  extendee?: string | undefined;
  /**
   * For numeric types, contains the original text representation of the value.
   * For booleans, "true" or "false".
   * For strings, contains the default text contents (not escaped in any way).
   * For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
   */
  default_value?: string | undefined;
  /**
   * If set, gives the index of a oneof in the containing type's oneof_decl
   * list.  This field is a member of that oneof.
   */
  oneof_index?: number | undefined;
  /**
   * JSON name of this field. The value is set by protocol compiler. If the
   * user has set a "json_name" option on this field, that option's value
   * will be used. Otherwise, it's deduced from the field's name by converting
   * it to camelCase.
   */
  json_name?: string | undefined;
  options?: FieldOptions | undefined;
  /**
   * If true, this is a proto3 "optional". When a proto3 field is optional, it
   * tracks presence regardless of field type.
   *
   * When proto3_optional is true, this field must belong to a oneof to signal
   * to old proto3 clients that presence is tracked for this field. This oneof
   * is known as a "synthetic" oneof, and this field must be its sole member
   * (each proto3 optional field gets its own synthetic oneof). Synthetic oneofs
   * exist in the descriptor only, and do not generate any API. Synthetic oneofs
   * must be ordered after all "real" oneofs.
   *
   * For message fields, proto3_optional doesn't create any semantic change,
   * since non-repeated message fields always track presence. However it still
   * indicates the semantic detail of whether the user wrote "optional" or not.
   * This can be useful for round-tripping the .proto file. For consistency we
   * give message fields a synthetic oneof also, even though it is not required
   * to track presence. This is especially important because the parser can't
   * tell if a field is a message or an enum, so it must always create a
   * synthetic oneof.
   *
   * Proto2 optional fields do not set this flag, because they already indicate
   * optional with `LABEL_OPTIONAL`.
   */
  proto3_optional?: boolean | undefined;
}

export enum FieldDescriptorProto_Type {
  /**
   * TYPE_DOUBLE - 0 is reserved for errors.
   * Order is weird for historical reasons.
   */
  TYPE_DOUBLE = "TYPE_DOUBLE",
  TYPE_FLOAT = "TYPE_FLOAT",
  /**
   * TYPE_INT64 - Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
   * negative values are likely.
   */
  TYPE_INT64 = "TYPE_INT64",
  TYPE_UINT64 = "TYPE_UINT64",
  /**
   * TYPE_INT32 - Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
   * negative values are likely.
   */
  TYPE_INT32 = "TYPE_INT32",
  TYPE_FIXED64 = "TYPE_FIXED64",
  TYPE_FIXED32 = "TYPE_FIXED32",
  TYPE_BOOL = "TYPE_BOOL",
  TYPE_STRING = "TYPE_STRING",
  /**
   * TYPE_GROUP - Tag-delimited aggregate.
   * Group type is deprecated and not supported after google.protobuf. However, Proto3
   * implementations should still be able to parse the group wire format and
   * treat group fields as unknown fields.  In Editions, the group wire format
   * can be enabled via the `message_encoding` feature.
   */
  TYPE_GROUP = "TYPE_GROUP",
  /** TYPE_MESSAGE - Length-delimited aggregate. */
  TYPE_MESSAGE = "TYPE_MESSAGE",
  /** TYPE_BYTES - New in version 2. */
  TYPE_BYTES = "TYPE_BYTES",
  TYPE_UINT32 = "TYPE_UINT32",
  TYPE_ENUM = "TYPE_ENUM",
  TYPE_SFIXED32 = "TYPE_SFIXED32",
  TYPE_SFIXED64 = "TYPE_SFIXED64",
  /** TYPE_SINT32 - Uses ZigZag encoding. */
  TYPE_SINT32 = "TYPE_SINT32",
  /** TYPE_SINT64 - Uses ZigZag encoding. */
  TYPE_SINT64 = "TYPE_SINT64",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function fieldDescriptorProto_TypeFromJSON(
  object: any,
): FieldDescriptorProto_Type {
  switch (object) {
    case 1:
    case "TYPE_DOUBLE":
      return FieldDescriptorProto_Type.TYPE_DOUBLE;
    case 2:
    case "TYPE_FLOAT":
      return FieldDescriptorProto_Type.TYPE_FLOAT;
    case 3:
    case "TYPE_INT64":
      return FieldDescriptorProto_Type.TYPE_INT64;
    case 4:
    case "TYPE_UINT64":
      return FieldDescriptorProto_Type.TYPE_UINT64;
    case 5:
    case "TYPE_INT32":
      return FieldDescriptorProto_Type.TYPE_INT32;
    case 6:
    case "TYPE_FIXED64":
      return FieldDescriptorProto_Type.TYPE_FIXED64;
    case 7:
    case "TYPE_FIXED32":
      return FieldDescriptorProto_Type.TYPE_FIXED32;
    case 8:
    case "TYPE_BOOL":
      return FieldDescriptorProto_Type.TYPE_BOOL;
    case 9:
    case "TYPE_STRING":
      return FieldDescriptorProto_Type.TYPE_STRING;
    case 10:
    case "TYPE_GROUP":
      return FieldDescriptorProto_Type.TYPE_GROUP;
    case 11:
    case "TYPE_MESSAGE":
      return FieldDescriptorProto_Type.TYPE_MESSAGE;
    case 12:
    case "TYPE_BYTES":
      return FieldDescriptorProto_Type.TYPE_BYTES;
    case 13:
    case "TYPE_UINT32":
      return FieldDescriptorProto_Type.TYPE_UINT32;
    case 14:
    case "TYPE_ENUM":
      return FieldDescriptorProto_Type.TYPE_ENUM;
    case 15:
    case "TYPE_SFIXED32":
      return FieldDescriptorProto_Type.TYPE_SFIXED32;
    case 16:
    case "TYPE_SFIXED64":
      return FieldDescriptorProto_Type.TYPE_SFIXED64;
    case 17:
    case "TYPE_SINT32":
      return FieldDescriptorProto_Type.TYPE_SINT32;
    case 18:
    case "TYPE_SINT64":
      return FieldDescriptorProto_Type.TYPE_SINT64;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldDescriptorProto_Type.UNRECOGNIZED;
  }
}

export function fieldDescriptorProto_TypeToJSON(
  object: FieldDescriptorProto_Type,
): string {
  switch (object) {
    case FieldDescriptorProto_Type.TYPE_DOUBLE:
      return "TYPE_DOUBLE";
    case FieldDescriptorProto_Type.TYPE_FLOAT:
      return "TYPE_FLOAT";
    case FieldDescriptorProto_Type.TYPE_INT64:
      return "TYPE_INT64";
    case FieldDescriptorProto_Type.TYPE_UINT64:
      return "TYPE_UINT64";
    case FieldDescriptorProto_Type.TYPE_INT32:
      return "TYPE_INT32";
    case FieldDescriptorProto_Type.TYPE_FIXED64:
      return "TYPE_FIXED64";
    case FieldDescriptorProto_Type.TYPE_FIXED32:
      return "TYPE_FIXED32";
    case FieldDescriptorProto_Type.TYPE_BOOL:
      return "TYPE_BOOL";
    case FieldDescriptorProto_Type.TYPE_STRING:
      return "TYPE_STRING";
    case FieldDescriptorProto_Type.TYPE_GROUP:
      return "TYPE_GROUP";
    case FieldDescriptorProto_Type.TYPE_MESSAGE:
      return "TYPE_MESSAGE";
    case FieldDescriptorProto_Type.TYPE_BYTES:
      return "TYPE_BYTES";
    case FieldDescriptorProto_Type.TYPE_UINT32:
      return "TYPE_UINT32";
    case FieldDescriptorProto_Type.TYPE_ENUM:
      return "TYPE_ENUM";
    case FieldDescriptorProto_Type.TYPE_SFIXED32:
      return "TYPE_SFIXED32";
    case FieldDescriptorProto_Type.TYPE_SFIXED64:
      return "TYPE_SFIXED64";
    case FieldDescriptorProto_Type.TYPE_SINT32:
      return "TYPE_SINT32";
    case FieldDescriptorProto_Type.TYPE_SINT64:
      return "TYPE_SINT64";
    case FieldDescriptorProto_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FieldDescriptorProto_Label {
  /** LABEL_OPTIONAL - 0 is reserved for errors */
  LABEL_OPTIONAL = "LABEL_OPTIONAL",
  LABEL_REPEATED = "LABEL_REPEATED",
  /**
   * LABEL_REQUIRED - The required label is only allowed in google.protobuf.  In proto3 and Editions
   * it's explicitly prohibited.  In Editions, the `field_presence` feature
   * can be used to get this behavior.
   */
  LABEL_REQUIRED = "LABEL_REQUIRED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function fieldDescriptorProto_LabelFromJSON(
  object: any,
): FieldDescriptorProto_Label {
  switch (object) {
    case 1:
    case "LABEL_OPTIONAL":
      return FieldDescriptorProto_Label.LABEL_OPTIONAL;
    case 3:
    case "LABEL_REPEATED":
      return FieldDescriptorProto_Label.LABEL_REPEATED;
    case 2:
    case "LABEL_REQUIRED":
      return FieldDescriptorProto_Label.LABEL_REQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldDescriptorProto_Label.UNRECOGNIZED;
  }
}

export function fieldDescriptorProto_LabelToJSON(
  object: FieldDescriptorProto_Label,
): string {
  switch (object) {
    case FieldDescriptorProto_Label.LABEL_OPTIONAL:
      return "LABEL_OPTIONAL";
    case FieldDescriptorProto_Label.LABEL_REPEATED:
      return "LABEL_REPEATED";
    case FieldDescriptorProto_Label.LABEL_REQUIRED:
      return "LABEL_REQUIRED";
    case FieldDescriptorProto_Label.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Describes a oneof. */
export interface OneofDescriptorProto {
  name?: string | undefined;
  options?: OneofOptions | undefined;
}

/** Describes an enum type. */
export interface EnumDescriptorProto {
  name?: string | undefined;
  value: EnumValueDescriptorProto[];
  options?: EnumOptions | undefined;
  /**
   * Range of reserved numeric values. Reserved numeric values may not be used
   * by enum values in the same enum declaration. Reserved ranges may not
   * overlap.
   */
  reserved_range: EnumDescriptorProto_EnumReservedRange[];
  /**
   * Reserved enum value names, which may not be reused. A given name may only
   * be reserved once.
   */
  reserved_name: string[];
}

/**
 * Range of reserved numeric values. Reserved values may not be used by
 * entries in the same enum. Reserved ranges may not overlap.
 *
 * Note that this is distinct from DescriptorProto.ReservedRange in that it
 * is inclusive such that it can appropriately represent the entire int32
 * domain.
 */
export interface EnumDescriptorProto_EnumReservedRange {
  /** Inclusive. */
  start?: number | undefined;
  /** Inclusive. */
  end?: number | undefined;
}

/** Describes a value within an enum. */
export interface EnumValueDescriptorProto {
  name?: string | undefined;
  number?: number | undefined;
  options?: EnumValueOptions | undefined;
}

/** Describes a service. */
export interface ServiceDescriptorProto {
  name?: string | undefined;
  method: MethodDescriptorProto[];
  options?: ServiceOptions | undefined;
}

/** Describes a method of a service. */
export interface MethodDescriptorProto {
  name?: string | undefined;
  /**
   * Input and output type names.  These are resolved in the same way as
   * FieldDescriptorProto.type_name, but must refer to a message type.
   */
  input_type?: string | undefined;
  output_type?: string | undefined;
  options?: MethodOptions | undefined;
  /** Identifies if client streams multiple client messages */
  client_streaming?: boolean | undefined;
  /** Identifies if server streams multiple server messages */
  server_streaming?: boolean | undefined;
}

export interface FileOptions {
  /**
   * Sets the Java package where classes generated from this .proto will be
   * placed.  By default, the proto package is used, but this is often
   * inappropriate because proto packages do not normally start with backwards
   * domain names.
   */
  java_package?: string | undefined;
  /**
   * Controls the name of the wrapper Java class generated for the .proto file.
   * That class will always contain the .proto file's getDescriptor() method as
   * well as any top-level extensions defined in the .proto file.
   * If java_multiple_files is disabled, then all the other classes from the
   * .proto file will be nested inside the single wrapper outer class.
   */
  java_outer_classname?: string | undefined;
  /**
   * If enabled, then the Java code generator will generate a separate .java
   * file for each top-level message, enum, and service defined in the .proto
   * file.  Thus, these types will *not* be nested inside the wrapper class
   * named by java_outer_classname.  However, the wrapper class will still be
   * generated to contain the file's getDescriptor() method as well as any
   * top-level extensions defined in the file.
   */
  java_multiple_files?: boolean | undefined;
  /**
   * This option does nothing.
   *
   * @deprecated
   */
  java_generate_equals_and_hash?: boolean | undefined;
  /**
   * A proto2 file can set this to true to opt in to UTF-8 checking for Java,
   * which will throw an exception if invalid UTF-8 is parsed from the wire or
   * assigned to a string field.
   *
   * TODO: clarify exactly what kinds of field types this option
   * applies to, and update these docs accordingly.
   *
   * Proto3 files already perform these checks. Setting the option explicitly to
   * false has no effect: it cannot be used to opt proto3 files out of UTF-8
   * checks.
   */
  java_string_check_utf8?: boolean | undefined;
  optimize_for?: FileOptions_OptimizeMode | undefined;
  /**
   * Sets the Go package where structs generated from this .proto will be
   * placed. If omitted, the Go package will be derived from the following:
   *   - The basename of the package import path, if provided.
   *   - Otherwise, the package statement in the .proto file, if present.
   *   - Otherwise, the basename of the .proto file, without extension.
   */
  go_package?: string | undefined;
  /**
   * Should generic services be generated in each language?  "Generic" services
   * are not specific to any particular RPC system.  They are generated by the
   * main code generators in each language (without additional plugins).
   * Generic services were the only kind of service generation supported by
   * early versions of google.protobuf.
   *
   * Generic services are now considered deprecated in favor of using plugins
   * that generate code specific to your particular RPC system.  Therefore,
   * these default to false.  Old code which depends on generic services should
   * explicitly set them to true.
   */
  cc_generic_services?: boolean | undefined;
  java_generic_services?: boolean | undefined;
  py_generic_services?: boolean | undefined;
  /**
   * Is this file deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for everything in the file, or it will be completely ignored; in the very
   * least, this is a formalization for deprecating files.
   */
  deprecated?: boolean | undefined;
  /**
   * Enables the use of arenas for the proto messages in this file. This applies
   * only to generated classes for C++.
   */
  cc_enable_arenas?: boolean | undefined;
  /**
   * Sets the objective c class prefix which is prepended to all objective c
   * generated classes from this .proto. There is no default.
   */
  objc_class_prefix?: string | undefined;
  /** Namespace for generated classes; defaults to the package. */
  csharp_namespace?: string | undefined;
  /**
   * By default Swift generators will take the proto package and CamelCase it
   * replacing '.' with underscore and use that to prefix the types/symbols
   * defined. When this options is provided, they will use this value instead
   * to prefix the types/symbols defined.
   */
  swift_prefix?: string | undefined;
  /**
   * Sets the php class prefix which is prepended to all php generated classes
   * from this .proto. Default is empty.
   */
  php_class_prefix?: string | undefined;
  /**
   * Use this option to change the namespace of php generated classes. Default
   * is empty. When this option is empty, the package name will be used for
   * determining the namespace.
   */
  php_namespace?: string | undefined;
  /**
   * Use this option to change the namespace of php generated metadata classes.
   * Default is empty. When this option is empty, the proto file name will be
   * used for determining the namespace.
   */
  php_metadata_namespace?: string | undefined;
  /**
   * Use this option to change the package of ruby generated classes. Default
   * is empty. When this option is not set, the package name will be used for
   * determining the ruby package.
   */
  ruby_package?: string | undefined;
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  /**
   * The parser stores options it doesn't recognize here.
   * See the documentation for the "Options" section above.
   */
  uninterpreted_option: UninterpretedOption[];
}

/** Generated classes can be optimized for speed or code size. */
export enum FileOptions_OptimizeMode {
  /** SPEED - Generate complete code for parsing, serialization, */
  SPEED = "SPEED",
  /** CODE_SIZE - etc. */
  CODE_SIZE = "CODE_SIZE",
  /** LITE_RUNTIME - Generate code using MessageLite and the lite runtime. */
  LITE_RUNTIME = "LITE_RUNTIME",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function fileOptions_OptimizeModeFromJSON(
  object: any,
): FileOptions_OptimizeMode {
  switch (object) {
    case 1:
    case "SPEED":
      return FileOptions_OptimizeMode.SPEED;
    case 2:
    case "CODE_SIZE":
      return FileOptions_OptimizeMode.CODE_SIZE;
    case 3:
    case "LITE_RUNTIME":
      return FileOptions_OptimizeMode.LITE_RUNTIME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FileOptions_OptimizeMode.UNRECOGNIZED;
  }
}

export function fileOptions_OptimizeModeToJSON(
  object: FileOptions_OptimizeMode,
): string {
  switch (object) {
    case FileOptions_OptimizeMode.SPEED:
      return "SPEED";
    case FileOptions_OptimizeMode.CODE_SIZE:
      return "CODE_SIZE";
    case FileOptions_OptimizeMode.LITE_RUNTIME:
      return "LITE_RUNTIME";
    case FileOptions_OptimizeMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MessageOptions {
  /**
   * Set true to use the old proto1 MessageSet wire format for extensions.
   * This is provided for backwards-compatibility with the MessageSet wire
   * format.  You should not use this for any other reason:  It's less
   * efficient, has fewer features, and is more complicated.
   *
   * The message must be defined exactly as follows:
   *   message Foo {
   *     option message_set_wire_format = true;
   *     extensions 4 to max;
   *   }
   * Note that the message cannot have any defined fields; MessageSets only
   * have extensions.
   *
   * All extensions of your type must be singular messages; e.g. they cannot
   * be int32s, enums, or repeated messages.
   *
   * Because this is an option, the above two restrictions are not enforced by
   * the protocol compiler.
   */
  message_set_wire_format?: boolean | undefined;
  /**
   * Disables the generation of the standard "descriptor()" accessor, which can
   * conflict with a field of the same name.  This is meant to make migration
   * from proto1 easier; new code should avoid fields named "descriptor".
   */
  no_standard_descriptor_accessor?: boolean | undefined;
  /**
   * Is this message deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for the message, or it will be completely ignored; in the very least,
   * this is a formalization for deprecating messages.
   */
  deprecated?: boolean | undefined;
  /**
   * Whether the message is an automatically generated map entry type for the
   * maps field.
   *
   * For maps fields:
   *     map<KeyType, ValueType> map_field = 1;
   * The parsed descriptor looks like:
   *     message MapFieldEntry {
   *         option map_entry = true;
   *         optional KeyType key = 1;
   *         optional ValueType value = 2;
   *     }
   *     repeated MapFieldEntry map_field = 1;
   *
   * Implementations may choose not to generate the map_entry=true message, but
   * use a native map in the target language to hold the keys and values.
   * The reflection APIs in such implementations still need to work as
   * if the field is a repeated message field.
   *
   * NOTE: Do not set the option in .proto files. Always use the maps syntax
   * instead. The option should only be implicitly set by the proto compiler
   * parser.
   */
  map_entry?: boolean | undefined;
  /**
   * Enable the legacy handling of JSON field name conflicts.  This lowercases
   * and strips underscored from the fields before comparison in proto3 only.
   * The new behavior takes `json_name` into account and applies to proto2 as
   * well.
   *
   * This should only be used as a temporary measure against broken builds due
   * to the change in behavior for JSON field name conflicts.
   *
   * TODO This is legacy behavior we plan to remove once downstream
   * teams have had time to migrate.
   *
   * @deprecated
   */
  deprecated_legacy_json_field_conflicts?: boolean | undefined;
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  /** The parser stores options it doesn't recognize here. See above. */
  uninterpreted_option: UninterpretedOption[];
}

export interface FieldOptions {
  /**
   * The ctype option instructs the C++ code generator to use a different
   * representation of the field than it normally would.  See the specific
   * options below.  This option is only implemented to support use of
   * [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of
   * type "bytes" in the open source release -- sorry, we'll try to include
   * other types in a future version!
   */
  ctype?: FieldOptions_CType | undefined;
  /**
   * The packed option can be enabled for repeated primitive fields to enable
   * a more efficient representation on the wire. Rather than repeatedly
   * writing the tag and type for each element, the entire array is encoded as
   * a single length-delimited blob. In proto3, only explicit setting it to
   * false will avoid using packed encoding.  This option is prohibited in
   * Editions, but the `repeated_field_encoding` feature can be used to control
   * the behavior.
   */
  packed?: boolean | undefined;
  /**
   * The jstype option determines the JavaScript type used for values of the
   * field.  The option is permitted only for 64 bit integral and fixed types
   * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
   * is represented as JavaScript string, which avoids loss of precision that
   * can happen when a large value is converted to a floating point JavaScript.
   * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
   * use the JavaScript "number" type.  The behavior of the default option
   * JS_NORMAL is implementation dependent.
   *
   * This option is an enum to permit additional types to be added, e.g.
   * goog.math.Integer.
   */
  jstype?: FieldOptions_JSType | undefined;
  /**
   * Should this field be parsed lazily?  Lazy applies only to message-type
   * fields.  It means that when the outer message is initially parsed, the
   * inner message's contents will not be parsed but instead stored in encoded
   * form.  The inner message will actually be parsed when it is first accessed.
   *
   * This is only a hint.  Implementations are free to choose whether to use
   * eager or lazy parsing regardless of the value of this option.  However,
   * setting this option true suggests that the protocol author believes that
   * using lazy parsing on this field is worth the additional bookkeeping
   * overhead typically needed to implement it.
   *
   * This option does not affect the public interface of any generated code;
   * all method signatures remain the same.  Furthermore, thread-safety of the
   * interface is not affected by this option; const methods remain safe to
   * call from multiple threads concurrently, while non-const methods continue
   * to require exclusive access.
   *
   * Note that lazy message fields are still eagerly verified to check
   * ill-formed wireformat or missing required fields. Calling IsInitialized()
   * on the outer message would fail if the inner message has missing required
   * fields. Failed verification would result in parsing failure (except when
   * uninitialized messages are acceptable).
   */
  lazy?: boolean | undefined;
  /**
   * unverified_lazy does no correctness checks on the byte stream. This should
   * only be used where lazy with verification is prohibitive for performance
   * reasons.
   */
  unverified_lazy?: boolean | undefined;
  /**
   * Is this field deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for accessors, or it will be completely ignored; in the very least, this
   * is a formalization for deprecating fields.
   */
  deprecated?: boolean | undefined;
  /** For Google-internal migration only. Do not use. */
  weak?: boolean | undefined;
  /**
   * Indicate that the field value should not be printed out when using debug
   * formats, e.g. when the field contains sensitive credentials.
   */
  debug_redact?: boolean | undefined;
  retention?: FieldOptions_OptionRetention | undefined;
  targets: FieldOptions_OptionTargetType[];
  edition_defaults: FieldOptions_EditionDefault[];
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  feature_support?: FieldOptions_FeatureSupport | undefined;
  /** The parser stores options it doesn't recognize here. See above. */
  uninterpreted_option: UninterpretedOption[];
}

export enum FieldOptions_CType {
  /** STRING - Default mode. */
  STRING = "STRING",
  /**
   * CORD - The option [ctype=CORD] may be applied to a non-repeated field of type
   * "bytes". It indicates that in C++, the data should be stored in a Cord
   * instead of a string.  For very large strings, this may reduce memory
   * fragmentation. It may also allow better performance when parsing from a
   * Cord, or when parsing with aliasing enabled, as the parsed Cord may then
   * alias the original buffer.
   */
  CORD = "CORD",
  STRING_PIECE = "STRING_PIECE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function fieldOptions_CTypeFromJSON(object: any): FieldOptions_CType {
  switch (object) {
    case 0:
    case "STRING":
      return FieldOptions_CType.STRING;
    case 1:
    case "CORD":
      return FieldOptions_CType.CORD;
    case 2:
    case "STRING_PIECE":
      return FieldOptions_CType.STRING_PIECE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldOptions_CType.UNRECOGNIZED;
  }
}

export function fieldOptions_CTypeToJSON(object: FieldOptions_CType): string {
  switch (object) {
    case FieldOptions_CType.STRING:
      return "STRING";
    case FieldOptions_CType.CORD:
      return "CORD";
    case FieldOptions_CType.STRING_PIECE:
      return "STRING_PIECE";
    case FieldOptions_CType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FieldOptions_JSType {
  /** JS_NORMAL - Use the default type. */
  JS_NORMAL = "JS_NORMAL",
  /** JS_STRING - Use JavaScript strings. */
  JS_STRING = "JS_STRING",
  /** JS_NUMBER - Use JavaScript numbers. */
  JS_NUMBER = "JS_NUMBER",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function fieldOptions_JSTypeFromJSON(object: any): FieldOptions_JSType {
  switch (object) {
    case 0:
    case "JS_NORMAL":
      return FieldOptions_JSType.JS_NORMAL;
    case 1:
    case "JS_STRING":
      return FieldOptions_JSType.JS_STRING;
    case 2:
    case "JS_NUMBER":
      return FieldOptions_JSType.JS_NUMBER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldOptions_JSType.UNRECOGNIZED;
  }
}

export function fieldOptions_JSTypeToJSON(object: FieldOptions_JSType): string {
  switch (object) {
    case FieldOptions_JSType.JS_NORMAL:
      return "JS_NORMAL";
    case FieldOptions_JSType.JS_STRING:
      return "JS_STRING";
    case FieldOptions_JSType.JS_NUMBER:
      return "JS_NUMBER";
    case FieldOptions_JSType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * If set to RETENTION_SOURCE, the option will be omitted from the binary.
 * Note: as of January 2023, support for this is in progress and does not yet
 * have an effect (b/264593489).
 */
export enum FieldOptions_OptionRetention {
  RETENTION_UNKNOWN = "RETENTION_UNKNOWN",
  RETENTION_RUNTIME = "RETENTION_RUNTIME",
  RETENTION_SOURCE = "RETENTION_SOURCE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function fieldOptions_OptionRetentionFromJSON(
  object: any,
): FieldOptions_OptionRetention {
  switch (object) {
    case 0:
    case "RETENTION_UNKNOWN":
      return FieldOptions_OptionRetention.RETENTION_UNKNOWN;
    case 1:
    case "RETENTION_RUNTIME":
      return FieldOptions_OptionRetention.RETENTION_RUNTIME;
    case 2:
    case "RETENTION_SOURCE":
      return FieldOptions_OptionRetention.RETENTION_SOURCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldOptions_OptionRetention.UNRECOGNIZED;
  }
}

export function fieldOptions_OptionRetentionToJSON(
  object: FieldOptions_OptionRetention,
): string {
  switch (object) {
    case FieldOptions_OptionRetention.RETENTION_UNKNOWN:
      return "RETENTION_UNKNOWN";
    case FieldOptions_OptionRetention.RETENTION_RUNTIME:
      return "RETENTION_RUNTIME";
    case FieldOptions_OptionRetention.RETENTION_SOURCE:
      return "RETENTION_SOURCE";
    case FieldOptions_OptionRetention.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * This indicates the types of entities that the field may apply to when used
 * as an option. If it is unset, then the field may be freely used as an
 * option on any kind of entity. Note: as of January 2023, support for this is
 * in progress and does not yet have an effect (b/264593489).
 */
export enum FieldOptions_OptionTargetType {
  TARGET_TYPE_UNKNOWN = "TARGET_TYPE_UNKNOWN",
  TARGET_TYPE_FILE = "TARGET_TYPE_FILE",
  TARGET_TYPE_EXTENSION_RANGE = "TARGET_TYPE_EXTENSION_RANGE",
  TARGET_TYPE_MESSAGE = "TARGET_TYPE_MESSAGE",
  TARGET_TYPE_FIELD = "TARGET_TYPE_FIELD",
  TARGET_TYPE_ONEOF = "TARGET_TYPE_ONEOF",
  TARGET_TYPE_ENUM = "TARGET_TYPE_ENUM",
  TARGET_TYPE_ENUM_ENTRY = "TARGET_TYPE_ENUM_ENTRY",
  TARGET_TYPE_SERVICE = "TARGET_TYPE_SERVICE",
  TARGET_TYPE_METHOD = "TARGET_TYPE_METHOD",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function fieldOptions_OptionTargetTypeFromJSON(
  object: any,
): FieldOptions_OptionTargetType {
  switch (object) {
    case 0:
    case "TARGET_TYPE_UNKNOWN":
      return FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN;
    case 1:
    case "TARGET_TYPE_FILE":
      return FieldOptions_OptionTargetType.TARGET_TYPE_FILE;
    case 2:
    case "TARGET_TYPE_EXTENSION_RANGE":
      return FieldOptions_OptionTargetType.TARGET_TYPE_EXTENSION_RANGE;
    case 3:
    case "TARGET_TYPE_MESSAGE":
      return FieldOptions_OptionTargetType.TARGET_TYPE_MESSAGE;
    case 4:
    case "TARGET_TYPE_FIELD":
      return FieldOptions_OptionTargetType.TARGET_TYPE_FIELD;
    case 5:
    case "TARGET_TYPE_ONEOF":
      return FieldOptions_OptionTargetType.TARGET_TYPE_ONEOF;
    case 6:
    case "TARGET_TYPE_ENUM":
      return FieldOptions_OptionTargetType.TARGET_TYPE_ENUM;
    case 7:
    case "TARGET_TYPE_ENUM_ENTRY":
      return FieldOptions_OptionTargetType.TARGET_TYPE_ENUM_ENTRY;
    case 8:
    case "TARGET_TYPE_SERVICE":
      return FieldOptions_OptionTargetType.TARGET_TYPE_SERVICE;
    case 9:
    case "TARGET_TYPE_METHOD":
      return FieldOptions_OptionTargetType.TARGET_TYPE_METHOD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldOptions_OptionTargetType.UNRECOGNIZED;
  }
}

export function fieldOptions_OptionTargetTypeToJSON(
  object: FieldOptions_OptionTargetType,
): string {
  switch (object) {
    case FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN:
      return "TARGET_TYPE_UNKNOWN";
    case FieldOptions_OptionTargetType.TARGET_TYPE_FILE:
      return "TARGET_TYPE_FILE";
    case FieldOptions_OptionTargetType.TARGET_TYPE_EXTENSION_RANGE:
      return "TARGET_TYPE_EXTENSION_RANGE";
    case FieldOptions_OptionTargetType.TARGET_TYPE_MESSAGE:
      return "TARGET_TYPE_MESSAGE";
    case FieldOptions_OptionTargetType.TARGET_TYPE_FIELD:
      return "TARGET_TYPE_FIELD";
    case FieldOptions_OptionTargetType.TARGET_TYPE_ONEOF:
      return "TARGET_TYPE_ONEOF";
    case FieldOptions_OptionTargetType.TARGET_TYPE_ENUM:
      return "TARGET_TYPE_ENUM";
    case FieldOptions_OptionTargetType.TARGET_TYPE_ENUM_ENTRY:
      return "TARGET_TYPE_ENUM_ENTRY";
    case FieldOptions_OptionTargetType.TARGET_TYPE_SERVICE:
      return "TARGET_TYPE_SERVICE";
    case FieldOptions_OptionTargetType.TARGET_TYPE_METHOD:
      return "TARGET_TYPE_METHOD";
    case FieldOptions_OptionTargetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FieldOptions_EditionDefault {
  edition?: Edition | undefined;
  /** Textproto value. */
  value?: string | undefined;
}

/** Information about the support window of a feature. */
export interface FieldOptions_FeatureSupport {
  /**
   * The edition that this feature was first available in.  In editions
   * earlier than this one, the default assigned to EDITION_LEGACY will be
   * used, and proto files will not be able to override it.
   */
  edition_introduced?: Edition | undefined;
  /**
   * The edition this feature becomes deprecated in.  Using this after this
   * edition may trigger warnings.
   */
  edition_deprecated?: Edition | undefined;
  /**
   * The deprecation warning text if this feature is used after the edition it
   * was marked deprecated in.
   */
  deprecation_warning?: string | undefined;
  /**
   * The edition this feature is no longer available in.  In editions after
   * this one, the last default assigned will be used, and proto files will
   * not be able to override it.
   */
  edition_removed?: Edition | undefined;
}

export interface OneofOptions {
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  /** The parser stores options it doesn't recognize here. See above. */
  uninterpreted_option: UninterpretedOption[];
}

export interface EnumOptions {
  /**
   * Set this option to true to allow mapping different tag names to the same
   * value.
   */
  allow_alias?: boolean | undefined;
  /**
   * Is this enum deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for the enum, or it will be completely ignored; in the very least, this
   * is a formalization for deprecating enums.
   */
  deprecated?: boolean | undefined;
  /**
   * Enable the legacy handling of JSON field name conflicts.  This lowercases
   * and strips underscored from the fields before comparison in proto3 only.
   * The new behavior takes `json_name` into account and applies to proto2 as
   * well.
   * TODO Remove this legacy behavior once downstream teams have
   * had time to migrate.
   *
   * @deprecated
   */
  deprecated_legacy_json_field_conflicts?: boolean | undefined;
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  /** The parser stores options it doesn't recognize here. See above. */
  uninterpreted_option: UninterpretedOption[];
}

export interface EnumValueOptions {
  /**
   * Is this enum value deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for the enum value, or it will be completely ignored; in the very least,
   * this is a formalization for deprecating enum values.
   */
  deprecated?: boolean | undefined;
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  /**
   * Indicate that fields annotated with this enum value should not be printed
   * out when using debug formats, e.g. when the field contains sensitive
   * credentials.
   */
  debug_redact?: boolean | undefined;
  /** The parser stores options it doesn't recognize here. See above. */
  uninterpreted_option: UninterpretedOption[];
}

export interface ServiceOptions {
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  /**
   * Is this service deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for the service, or it will be completely ignored; in the very least,
   * this is a formalization for deprecating services.
   */
  deprecated?: boolean | undefined;
  /** The parser stores options it doesn't recognize here. See above. */
  uninterpreted_option: UninterpretedOption[];
}

export interface MethodOptions {
  /**
   * Is this method deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for the method, or it will be completely ignored; in the very least,
   * this is a formalization for deprecating methods.
   */
  deprecated?: boolean | undefined;
  idempotency_level?: MethodOptions_IdempotencyLevel | undefined;
  /** Any features defined in the specific edition. */
  features?: FeatureSet | undefined;
  /** The parser stores options it doesn't recognize here. See above. */
  uninterpreted_option: UninterpretedOption[];
}

/**
 * Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
 * or neither? HTTP based RPC implementation may choose GET verb for safe
 * methods, and PUT verb for idempotent methods instead of the default POST.
 */
export enum MethodOptions_IdempotencyLevel {
  IDEMPOTENCY_UNKNOWN = "IDEMPOTENCY_UNKNOWN",
  /** NO_SIDE_EFFECTS - implies idempotent */
  NO_SIDE_EFFECTS = "NO_SIDE_EFFECTS",
  /** IDEMPOTENT - idempotent, but may have side effects */
  IDEMPOTENT = "IDEMPOTENT",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function methodOptions_IdempotencyLevelFromJSON(
  object: any,
): MethodOptions_IdempotencyLevel {
  switch (object) {
    case 0:
    case "IDEMPOTENCY_UNKNOWN":
      return MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN;
    case 1:
    case "NO_SIDE_EFFECTS":
      return MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS;
    case 2:
    case "IDEMPOTENT":
      return MethodOptions_IdempotencyLevel.IDEMPOTENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MethodOptions_IdempotencyLevel.UNRECOGNIZED;
  }
}

export function methodOptions_IdempotencyLevelToJSON(
  object: MethodOptions_IdempotencyLevel,
): string {
  switch (object) {
    case MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN:
      return "IDEMPOTENCY_UNKNOWN";
    case MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS:
      return "NO_SIDE_EFFECTS";
    case MethodOptions_IdempotencyLevel.IDEMPOTENT:
      return "IDEMPOTENT";
    case MethodOptions_IdempotencyLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A message representing a option the parser does not recognize. This only
 * appears in options protos created by the compiler::Parser class.
 * DescriptorPool resolves these when building Descriptor objects. Therefore,
 * options protos in descriptor objects (e.g. returned by Descriptor::options(),
 * or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
 * in them.
 */
export interface UninterpretedOption {
  name: UninterpretedOption_NamePart[];
  /**
   * The value of the uninterpreted option, in whatever type the tokenizer
   * identified it as during parsing. Exactly one of these should be set.
   */
  identifier_value?: string | undefined;
  positive_int_value?: number | undefined;
  negative_int_value?: number | undefined;
  double_value?: number | undefined;
  string_value?: Uint8Array | undefined;
  aggregate_value?: string | undefined;
}

/**
 * The name of the uninterpreted option.  Each string represents a segment in
 * a dot-separated name.  is_extension is true iff a segment represents an
 * extension (denoted with parentheses in options specs in .proto files).
 * E.g.,{ ["foo", false], ["bar.baz", true], ["moo", false] } represents
 * "foo.(bar.baz).moo".
 */
export interface UninterpretedOption_NamePart {
  name_part: string;
  is_extension: boolean;
}

/**
 * TODO Enums in C++ gencode (and potentially other languages) are
 * not well scoped.  This means that each of the feature enums below can clash
 * with each other.  The short names we've chosen maximize call-site
 * readability, but leave us very open to this scenario.  A future feature will
 * be designed and implemented to handle this, hopefully before we ever hit a
 * conflict here.
 */
export interface FeatureSet {
  field_presence?: FeatureSet_FieldPresence | undefined;
  enum_type?: FeatureSet_EnumType | undefined;
  repeated_field_encoding?: FeatureSet_RepeatedFieldEncoding | undefined;
  utf8_validation?: FeatureSet_Utf8Validation | undefined;
  message_encoding?: FeatureSet_MessageEncoding | undefined;
  json_format?: FeatureSet_JsonFormat | undefined;
}

export enum FeatureSet_FieldPresence {
  FIELD_PRESENCE_UNKNOWN = "FIELD_PRESENCE_UNKNOWN",
  EXPLICIT = "EXPLICIT",
  IMPLICIT = "IMPLICIT",
  LEGACY_REQUIRED = "LEGACY_REQUIRED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function featureSet_FieldPresenceFromJSON(
  object: any,
): FeatureSet_FieldPresence {
  switch (object) {
    case 0:
    case "FIELD_PRESENCE_UNKNOWN":
      return FeatureSet_FieldPresence.FIELD_PRESENCE_UNKNOWN;
    case 1:
    case "EXPLICIT":
      return FeatureSet_FieldPresence.EXPLICIT;
    case 2:
    case "IMPLICIT":
      return FeatureSet_FieldPresence.IMPLICIT;
    case 3:
    case "LEGACY_REQUIRED":
      return FeatureSet_FieldPresence.LEGACY_REQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSet_FieldPresence.UNRECOGNIZED;
  }
}

export function featureSet_FieldPresenceToJSON(
  object: FeatureSet_FieldPresence,
): string {
  switch (object) {
    case FeatureSet_FieldPresence.FIELD_PRESENCE_UNKNOWN:
      return "FIELD_PRESENCE_UNKNOWN";
    case FeatureSet_FieldPresence.EXPLICIT:
      return "EXPLICIT";
    case FeatureSet_FieldPresence.IMPLICIT:
      return "IMPLICIT";
    case FeatureSet_FieldPresence.LEGACY_REQUIRED:
      return "LEGACY_REQUIRED";
    case FeatureSet_FieldPresence.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FeatureSet_EnumType {
  ENUM_TYPE_UNKNOWN = "ENUM_TYPE_UNKNOWN",
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function featureSet_EnumTypeFromJSON(object: any): FeatureSet_EnumType {
  switch (object) {
    case 0:
    case "ENUM_TYPE_UNKNOWN":
      return FeatureSet_EnumType.ENUM_TYPE_UNKNOWN;
    case 1:
    case "OPEN":
      return FeatureSet_EnumType.OPEN;
    case 2:
    case "CLOSED":
      return FeatureSet_EnumType.CLOSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSet_EnumType.UNRECOGNIZED;
  }
}

export function featureSet_EnumTypeToJSON(object: FeatureSet_EnumType): string {
  switch (object) {
    case FeatureSet_EnumType.ENUM_TYPE_UNKNOWN:
      return "ENUM_TYPE_UNKNOWN";
    case FeatureSet_EnumType.OPEN:
      return "OPEN";
    case FeatureSet_EnumType.CLOSED:
      return "CLOSED";
    case FeatureSet_EnumType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FeatureSet_RepeatedFieldEncoding {
  REPEATED_FIELD_ENCODING_UNKNOWN = "REPEATED_FIELD_ENCODING_UNKNOWN",
  PACKED = "PACKED",
  EXPANDED = "EXPANDED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function featureSet_RepeatedFieldEncodingFromJSON(
  object: any,
): FeatureSet_RepeatedFieldEncoding {
  switch (object) {
    case 0:
    case "REPEATED_FIELD_ENCODING_UNKNOWN":
      return FeatureSet_RepeatedFieldEncoding.REPEATED_FIELD_ENCODING_UNKNOWN;
    case 1:
    case "PACKED":
      return FeatureSet_RepeatedFieldEncoding.PACKED;
    case 2:
    case "EXPANDED":
      return FeatureSet_RepeatedFieldEncoding.EXPANDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSet_RepeatedFieldEncoding.UNRECOGNIZED;
  }
}

export function featureSet_RepeatedFieldEncodingToJSON(
  object: FeatureSet_RepeatedFieldEncoding,
): string {
  switch (object) {
    case FeatureSet_RepeatedFieldEncoding.REPEATED_FIELD_ENCODING_UNKNOWN:
      return "REPEATED_FIELD_ENCODING_UNKNOWN";
    case FeatureSet_RepeatedFieldEncoding.PACKED:
      return "PACKED";
    case FeatureSet_RepeatedFieldEncoding.EXPANDED:
      return "EXPANDED";
    case FeatureSet_RepeatedFieldEncoding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FeatureSet_Utf8Validation {
  UTF8_VALIDATION_UNKNOWN = "UTF8_VALIDATION_UNKNOWN",
  VERIFY = "VERIFY",
  NONE = "NONE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function featureSet_Utf8ValidationFromJSON(
  object: any,
): FeatureSet_Utf8Validation {
  switch (object) {
    case 0:
    case "UTF8_VALIDATION_UNKNOWN":
      return FeatureSet_Utf8Validation.UTF8_VALIDATION_UNKNOWN;
    case 2:
    case "VERIFY":
      return FeatureSet_Utf8Validation.VERIFY;
    case 3:
    case "NONE":
      return FeatureSet_Utf8Validation.NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSet_Utf8Validation.UNRECOGNIZED;
  }
}

export function featureSet_Utf8ValidationToJSON(
  object: FeatureSet_Utf8Validation,
): string {
  switch (object) {
    case FeatureSet_Utf8Validation.UTF8_VALIDATION_UNKNOWN:
      return "UTF8_VALIDATION_UNKNOWN";
    case FeatureSet_Utf8Validation.VERIFY:
      return "VERIFY";
    case FeatureSet_Utf8Validation.NONE:
      return "NONE";
    case FeatureSet_Utf8Validation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FeatureSet_MessageEncoding {
  MESSAGE_ENCODING_UNKNOWN = "MESSAGE_ENCODING_UNKNOWN",
  LENGTH_PREFIXED = "LENGTH_PREFIXED",
  DELIMITED = "DELIMITED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function featureSet_MessageEncodingFromJSON(
  object: any,
): FeatureSet_MessageEncoding {
  switch (object) {
    case 0:
    case "MESSAGE_ENCODING_UNKNOWN":
      return FeatureSet_MessageEncoding.MESSAGE_ENCODING_UNKNOWN;
    case 1:
    case "LENGTH_PREFIXED":
      return FeatureSet_MessageEncoding.LENGTH_PREFIXED;
    case 2:
    case "DELIMITED":
      return FeatureSet_MessageEncoding.DELIMITED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSet_MessageEncoding.UNRECOGNIZED;
  }
}

export function featureSet_MessageEncodingToJSON(
  object: FeatureSet_MessageEncoding,
): string {
  switch (object) {
    case FeatureSet_MessageEncoding.MESSAGE_ENCODING_UNKNOWN:
      return "MESSAGE_ENCODING_UNKNOWN";
    case FeatureSet_MessageEncoding.LENGTH_PREFIXED:
      return "LENGTH_PREFIXED";
    case FeatureSet_MessageEncoding.DELIMITED:
      return "DELIMITED";
    case FeatureSet_MessageEncoding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FeatureSet_JsonFormat {
  JSON_FORMAT_UNKNOWN = "JSON_FORMAT_UNKNOWN",
  ALLOW = "ALLOW",
  LEGACY_BEST_EFFORT = "LEGACY_BEST_EFFORT",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function featureSet_JsonFormatFromJSON(
  object: any,
): FeatureSet_JsonFormat {
  switch (object) {
    case 0:
    case "JSON_FORMAT_UNKNOWN":
      return FeatureSet_JsonFormat.JSON_FORMAT_UNKNOWN;
    case 1:
    case "ALLOW":
      return FeatureSet_JsonFormat.ALLOW;
    case 2:
    case "LEGACY_BEST_EFFORT":
      return FeatureSet_JsonFormat.LEGACY_BEST_EFFORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSet_JsonFormat.UNRECOGNIZED;
  }
}

export function featureSet_JsonFormatToJSON(
  object: FeatureSet_JsonFormat,
): string {
  switch (object) {
    case FeatureSet_JsonFormat.JSON_FORMAT_UNKNOWN:
      return "JSON_FORMAT_UNKNOWN";
    case FeatureSet_JsonFormat.ALLOW:
      return "ALLOW";
    case FeatureSet_JsonFormat.LEGACY_BEST_EFFORT:
      return "LEGACY_BEST_EFFORT";
    case FeatureSet_JsonFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A compiled specification for the defaults of a set of features.  These
 * messages are generated from FeatureSet extensions and can be used to seed
 * feature resolution. The resolution with this object becomes a simple search
 * for the closest matching edition, followed by proto merges.
 */
export interface FeatureSetDefaults {
  defaults: FeatureSetDefaults_FeatureSetEditionDefault[];
  /**
   * The minimum supported edition (inclusive) when this was constructed.
   * Editions before this will not have defaults.
   */
  minimum_edition?: Edition | undefined;
  /**
   * The maximum known edition (inclusive) when this was constructed. Editions
   * after this will not have reliable defaults.
   */
  maximum_edition?: Edition | undefined;
}

/**
 * A map from every known edition with a unique set of defaults to its
 * defaults. Not all editions may be contained here.  For a given edition,
 * the defaults at the closest matching edition ordered at or before it should
 * be used.  This field must be in strict ascending order by edition.
 */
export interface FeatureSetDefaults_FeatureSetEditionDefault {
  edition?: Edition | undefined;
  /** Defaults of features that can be overridden in this edition. */
  overridable_features?: FeatureSet | undefined;
  /** Defaults of features that can't be overridden in this edition. */
  fixed_features?: FeatureSet | undefined;
}

/**
 * Encapsulates information about the original source file from which a
 * FileDescriptorProto was generated.
 */
export interface SourceCodeInfo {
  /**
   * A Location identifies a piece of source code in a .proto file which
   * corresponds to a particular definition.  This information is intended
   * to be useful to IDEs, code indexers, documentation generators, and similar
   * tools.
   *
   * For example, say we have a file like:
   *   message Foo {
   *     optional string foo = 1;
   *   }
   * Let's look at just the field definition:
   *   optional string foo = 1;
   *   ^       ^^     ^^  ^  ^^^
   *   a       bc     de  f  ghi
   * We have the following locations:
   *   span   path               represents
   *   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
   *   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
   *   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
   *   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
   *   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
   *
   * Notes:
   * - A location may refer to a repeated field itself (i.e. not to any
   *   particular index within it).  This is used whenever a set of elements are
   *   logically enclosed in a single code segment.  For example, an entire
   *   extend block (possibly containing multiple extension definitions) will
   *   have an outer location whose path refers to the "extensions" repeated
   *   field without an index.
   * - Multiple locations may have the same path.  This happens when a single
   *   logical declaration is spread out across multiple places.  The most
   *   obvious example is the "extend" block again -- there may be multiple
   *   extend blocks in the same scope, each of which will have the same path.
   * - A location's span is not always a subset of its parent's span.  For
   *   example, the "extendee" of an extension declaration appears at the
   *   beginning of the "extend" block and is shared by all extensions within
   *   the block.
   * - Just because a location's span is a subset of some other location's span
   *   does not mean that it is a descendant.  For example, a "group" defines
   *   both a type and a field in a single declaration.  Thus, the locations
   *   corresponding to the type and field and their components will overlap.
   * - Code which tries to interpret locations should probably be designed to
   *   ignore those that it doesn't understand, as more types of locations could
   *   be recorded in the future.
   */
  location: SourceCodeInfo_Location[];
}

export interface SourceCodeInfo_Location {
  /**
   * Identifies which part of the FileDescriptorProto was defined at this
   * location.
   *
   * Each element is a field number or an index.  They form a path from
   * the root FileDescriptorProto to the place where the definition appears.
   * For example, this path:
   *   [ 4, 3, 2, 7, 1 ]
   * refers to:
   *   file.message_type(3)  // 4, 3
   *       .field(7)         // 2, 7
   *       .name()           // 1
   * This is because FileDescriptorProto.message_type has field number 4:
   *   repeated DescriptorProto message_type = 4;
   * and DescriptorProto.field has field number 2:
   *   repeated FieldDescriptorProto field = 2;
   * and FieldDescriptorProto.name has field number 1:
   *   optional string name = 1;
   *
   * Thus, the above path gives the location of a field name.  If we removed
   * the last element:
   *   [ 4, 3, 2, 7 ]
   * this path refers to the whole field declaration (from the beginning
   * of the label to the terminating semicolon).
   */
  path: number[];
  /**
   * Always has exactly three or four elements: start line, start column,
   * end line (optional, otherwise assumed same as start line), end column.
   * These are packed into a single field for efficiency.  Note that line
   * and column numbers are zero-based -- typically you will want to add
   * 1 to each before displaying to a user.
   */
  span: number[];
  /**
   * If this SourceCodeInfo represents a complete declaration, these are any
   * comments appearing before and after the declaration which appear to be
   * attached to the declaration.
   *
   * A series of line comments appearing on consecutive lines, with no other
   * tokens appearing on those lines, will be treated as a single comment.
   *
   * leading_detached_comments will keep paragraphs of comments that appear
   * before (but not connected to) the current element. Each paragraph,
   * separated by empty lines, will be one comment element in the repeated
   * field.
   *
   * Only the comment content is provided; comment markers (e.g. //) are
   * stripped out.  For block comments, leading whitespace and an asterisk
   * will be stripped from the beginning of each line other than the first.
   * Newlines are included in the output.
   *
   * Examples:
   *
   *   optional int32 foo = 1;  // Comment attached to foo.
   *   // Comment attached to bar.
   *   optional int32 bar = 2;
   *
   *   optional string baz = 3;
   *   // Comment attached to baz.
   *   // Another line attached to baz.
   *
   *   // Comment attached to moo.
   *   //
   *   // Another line attached to moo.
   *   optional double moo = 4;
   *
   *   // Detached comment for corge. This is not leading or trailing comments
   *   // to moo or corge because there are blank lines separating it from
   *   // both.
   *
   *   // Detached comment for corge paragraph 2.
   *
   *   optional string corge = 5;
   *   /* Block comment attached
   *    * to corge.  Leading asterisks
   *    * will be removed. * /
   *   /* Block comment attached to
   *    * grault. * /
   *   optional int32 grault = 6;
   *
   *   // ignored detached comments.
   */
  leading_comments?: string | undefined;
  trailing_comments?: string | undefined;
  leading_detached_comments: string[];
}

/**
 * Describes the relationship between generated code and its original source
 * file. A GeneratedCodeInfo message is associated with only one generated
 * source file, but may contain references to different source .proto files.
 */
export interface GeneratedCodeInfo {
  /**
   * An Annotation connects some span of text in generated code to an element
   * of its generating .proto file.
   */
  annotation: GeneratedCodeInfo_Annotation[];
}

export interface GeneratedCodeInfo_Annotation {
  /**
   * Identifies the element in the original source .proto file. This field
   * is formatted the same as SourceCodeInfo.Location.path.
   */
  path: number[];
  /** Identifies the filesystem path to the original source .proto. */
  source_file?: string | undefined;
  /**
   * Identifies the starting offset in bytes in the generated code
   * that relates to the identified object.
   */
  begin?: number | undefined;
  /**
   * Identifies the ending offset in bytes in the generated code that
   * relates to the identified object. The end offset should be one past
   * the last relevant byte (so the length of the text = end - begin).
   */
  end?: number | undefined;
  semantic?: GeneratedCodeInfo_Annotation_Semantic | undefined;
}

/**
 * Represents the identified object's effect on the element in the original
 * .proto file.
 */
export enum GeneratedCodeInfo_Annotation_Semantic {
  /** NONE - There is no effect or the effect is indescribable. */
  NONE = "NONE",
  /** SET - The element is set or otherwise mutated. */
  SET = "SET",
  /** ALIAS - An alias to the element is returned. */
  ALIAS = "ALIAS",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function generatedCodeInfo_Annotation_SemanticFromJSON(
  object: any,
): GeneratedCodeInfo_Annotation_Semantic {
  switch (object) {
    case 0:
    case "NONE":
      return GeneratedCodeInfo_Annotation_Semantic.NONE;
    case 1:
    case "SET":
      return GeneratedCodeInfo_Annotation_Semantic.SET;
    case 2:
    case "ALIAS":
      return GeneratedCodeInfo_Annotation_Semantic.ALIAS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GeneratedCodeInfo_Annotation_Semantic.UNRECOGNIZED;
  }
}

export function generatedCodeInfo_Annotation_SemanticToJSON(
  object: GeneratedCodeInfo_Annotation_Semantic,
): string {
  switch (object) {
    case GeneratedCodeInfo_Annotation_Semantic.NONE:
      return "NONE";
    case GeneratedCodeInfo_Annotation_Semantic.SET:
      return "SET";
    case GeneratedCodeInfo_Annotation_Semantic.ALIAS:
      return "ALIAS";
    case GeneratedCodeInfo_Annotation_Semantic.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFileDescriptorSet(): FileDescriptorSet {
  return { file: [] };
}

export const FileDescriptorSet: MessageFns<FileDescriptorSet> = {
  fromJSON(object: any): FileDescriptorSet {
    return {
      file: globalThis.Array.isArray(object?.file)
        ? object.file.map((e: any) => FileDescriptorProto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FileDescriptorSet): unknown {
    const obj: any = {};
    if (message.file?.length) {
      obj.file = message.file.map((e) => FileDescriptorProto.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FileDescriptorSet>): FileDescriptorSet {
    return FileDescriptorSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileDescriptorSet>): FileDescriptorSet {
    const message = createBaseFileDescriptorSet();
    message.file =
      object.file?.map((e) => FileDescriptorProto.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFileDescriptorProto(): FileDescriptorProto {
  return {
    name: "",
    package: "",
    dependency: [],
    public_dependency: [],
    weak_dependency: [],
    message_type: [],
    enum_type: [],
    service: [],
    extension: [],
    options: undefined,
    source_code_info: undefined,
    syntax: "",
    edition: Edition.EDITION_UNKNOWN,
  };
}

export const FileDescriptorProto: MessageFns<FileDescriptorProto> = {
  fromJSON(object: any): FileDescriptorProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      package: isSet(object.package) ? globalThis.String(object.package) : "",
      dependency: globalThis.Array.isArray(object?.dependency)
        ? object.dependency.map((e: any) => globalThis.String(e))
        : [],
      public_dependency: globalThis.Array.isArray(object?.public_dependency)
        ? object.public_dependency.map((e: any) => globalThis.Number(e))
        : [],
      weak_dependency: globalThis.Array.isArray(object?.weak_dependency)
        ? object.weak_dependency.map((e: any) => globalThis.Number(e))
        : [],
      message_type: globalThis.Array.isArray(object?.message_type)
        ? object.message_type.map((e: any) => DescriptorProto.fromJSON(e))
        : [],
      enum_type: globalThis.Array.isArray(object?.enum_type)
        ? object.enum_type.map((e: any) => EnumDescriptorProto.fromJSON(e))
        : [],
      service: globalThis.Array.isArray(object?.service)
        ? object.service.map((e: any) => ServiceDescriptorProto.fromJSON(e))
        : [],
      extension: globalThis.Array.isArray(object?.extension)
        ? object.extension.map((e: any) => FieldDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? FileOptions.fromJSON(object.options)
        : undefined,
      source_code_info: isSet(object.source_code_info)
        ? SourceCodeInfo.fromJSON(object.source_code_info)
        : undefined,
      syntax: isSet(object.syntax) ? globalThis.String(object.syntax) : "",
      edition: isSet(object.edition)
        ? editionFromJSON(object.edition)
        : Edition.EDITION_UNKNOWN,
    };
  },

  toJSON(message: FileDescriptorProto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.package !== undefined && message.package !== "") {
      obj.package = message.package;
    }
    if (message.dependency?.length) {
      obj.dependency = message.dependency;
    }
    if (message.public_dependency?.length) {
      obj.public_dependency = message.public_dependency.map((e) =>
        Math.round(e),
      );
    }
    if (message.weak_dependency?.length) {
      obj.weak_dependency = message.weak_dependency.map((e) => Math.round(e));
    }
    if (message.message_type?.length) {
      obj.message_type = message.message_type.map((e) =>
        DescriptorProto.toJSON(e),
      );
    }
    if (message.enum_type?.length) {
      obj.enum_type = message.enum_type.map((e) =>
        EnumDescriptorProto.toJSON(e),
      );
    }
    if (message.service?.length) {
      obj.service = message.service.map((e) =>
        ServiceDescriptorProto.toJSON(e),
      );
    }
    if (message.extension?.length) {
      obj.extension = message.extension.map((e) =>
        FieldDescriptorProto.toJSON(e),
      );
    }
    if (message.options !== undefined) {
      obj.options = FileOptions.toJSON(message.options);
    }
    if (message.source_code_info !== undefined) {
      obj.source_code_info = SourceCodeInfo.toJSON(message.source_code_info);
    }
    if (message.syntax !== undefined && message.syntax !== "") {
      obj.syntax = message.syntax;
    }
    if (
      message.edition !== undefined &&
      message.edition !== Edition.EDITION_UNKNOWN
    ) {
      obj.edition = editionToJSON(message.edition);
    }
    return obj;
  },

  create(base?: DeepPartial<FileDescriptorProto>): FileDescriptorProto {
    return FileDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileDescriptorProto>): FileDescriptorProto {
    const message = createBaseFileDescriptorProto();
    message.name = object.name ?? "";
    message.package = object.package ?? "";
    message.dependency = object.dependency?.map((e) => e) || [];
    message.public_dependency = object.public_dependency?.map((e) => e) || [];
    message.weak_dependency = object.weak_dependency?.map((e) => e) || [];
    message.message_type =
      object.message_type?.map((e) => DescriptorProto.fromPartial(e)) || [];
    message.enum_type =
      object.enum_type?.map((e) => EnumDescriptorProto.fromPartial(e)) || [];
    message.service =
      object.service?.map((e) => ServiceDescriptorProto.fromPartial(e)) || [];
    message.extension =
      object.extension?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.options =
      object.options !== undefined && object.options !== null
        ? FileOptions.fromPartial(object.options)
        : undefined;
    message.source_code_info =
      object.source_code_info !== undefined && object.source_code_info !== null
        ? SourceCodeInfo.fromPartial(object.source_code_info)
        : undefined;
    message.syntax = object.syntax ?? "";
    message.edition = object.edition ?? Edition.EDITION_UNKNOWN;
    return message;
  },
};

function createBaseDescriptorProto(): DescriptorProto {
  return {
    name: "",
    field: [],
    extension: [],
    nested_type: [],
    enum_type: [],
    extension_range: [],
    oneof_decl: [],
    options: undefined,
    reserved_range: [],
    reserved_name: [],
  };
}

export const DescriptorProto: MessageFns<DescriptorProto> = {
  fromJSON(object: any): DescriptorProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      field: globalThis.Array.isArray(object?.field)
        ? object.field.map((e: any) => FieldDescriptorProto.fromJSON(e))
        : [],
      extension: globalThis.Array.isArray(object?.extension)
        ? object.extension.map((e: any) => FieldDescriptorProto.fromJSON(e))
        : [],
      nested_type: globalThis.Array.isArray(object?.nested_type)
        ? object.nested_type.map((e: any) => DescriptorProto.fromJSON(e))
        : [],
      enum_type: globalThis.Array.isArray(object?.enum_type)
        ? object.enum_type.map((e: any) => EnumDescriptorProto.fromJSON(e))
        : [],
      extension_range: globalThis.Array.isArray(object?.extension_range)
        ? object.extension_range.map((e: any) =>
            DescriptorProto_ExtensionRange.fromJSON(e),
          )
        : [],
      oneof_decl: globalThis.Array.isArray(object?.oneof_decl)
        ? object.oneof_decl.map((e: any) => OneofDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? MessageOptions.fromJSON(object.options)
        : undefined,
      reserved_range: globalThis.Array.isArray(object?.reserved_range)
        ? object.reserved_range.map((e: any) =>
            DescriptorProto_ReservedRange.fromJSON(e),
          )
        : [],
      reserved_name: globalThis.Array.isArray(object?.reserved_name)
        ? object.reserved_name.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DescriptorProto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.field?.length) {
      obj.field = message.field.map((e) => FieldDescriptorProto.toJSON(e));
    }
    if (message.extension?.length) {
      obj.extension = message.extension.map((e) =>
        FieldDescriptorProto.toJSON(e),
      );
    }
    if (message.nested_type?.length) {
      obj.nested_type = message.nested_type.map((e) =>
        DescriptorProto.toJSON(e),
      );
    }
    if (message.enum_type?.length) {
      obj.enum_type = message.enum_type.map((e) =>
        EnumDescriptorProto.toJSON(e),
      );
    }
    if (message.extension_range?.length) {
      obj.extension_range = message.extension_range.map((e) =>
        DescriptorProto_ExtensionRange.toJSON(e),
      );
    }
    if (message.oneof_decl?.length) {
      obj.oneof_decl = message.oneof_decl.map((e) =>
        OneofDescriptorProto.toJSON(e),
      );
    }
    if (message.options !== undefined) {
      obj.options = MessageOptions.toJSON(message.options);
    }
    if (message.reserved_range?.length) {
      obj.reserved_range = message.reserved_range.map((e) =>
        DescriptorProto_ReservedRange.toJSON(e),
      );
    }
    if (message.reserved_name?.length) {
      obj.reserved_name = message.reserved_name;
    }
    return obj;
  },

  create(base?: DeepPartial<DescriptorProto>): DescriptorProto {
    return DescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DescriptorProto>): DescriptorProto {
    const message = createBaseDescriptorProto();
    message.name = object.name ?? "";
    message.field =
      object.field?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.extension =
      object.extension?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.nested_type =
      object.nested_type?.map((e) => DescriptorProto.fromPartial(e)) || [];
    message.enum_type =
      object.enum_type?.map((e) => EnumDescriptorProto.fromPartial(e)) || [];
    message.extension_range =
      object.extension_range?.map((e) =>
        DescriptorProto_ExtensionRange.fromPartial(e),
      ) || [];
    message.oneof_decl =
      object.oneof_decl?.map((e) => OneofDescriptorProto.fromPartial(e)) || [];
    message.options =
      object.options !== undefined && object.options !== null
        ? MessageOptions.fromPartial(object.options)
        : undefined;
    message.reserved_range =
      object.reserved_range?.map((e) =>
        DescriptorProto_ReservedRange.fromPartial(e),
      ) || [];
    message.reserved_name = object.reserved_name?.map((e) => e) || [];
    return message;
  },
};

function createBaseDescriptorProto_ExtensionRange(): DescriptorProto_ExtensionRange {
  return { start: 0, end: 0, options: undefined };
}

export const DescriptorProto_ExtensionRange: MessageFns<DescriptorProto_ExtensionRange> =
  {
    fromJSON(object: any): DescriptorProto_ExtensionRange {
      return {
        start: isSet(object.start) ? globalThis.Number(object.start) : 0,
        end: isSet(object.end) ? globalThis.Number(object.end) : 0,
        options: isSet(object.options)
          ? ExtensionRangeOptions.fromJSON(object.options)
          : undefined,
      };
    },

    toJSON(message: DescriptorProto_ExtensionRange): unknown {
      const obj: any = {};
      if (message.start !== undefined && message.start !== 0) {
        obj.start = Math.round(message.start);
      }
      if (message.end !== undefined && message.end !== 0) {
        obj.end = Math.round(message.end);
      }
      if (message.options !== undefined) {
        obj.options = ExtensionRangeOptions.toJSON(message.options);
      }
      return obj;
    },

    create(
      base?: DeepPartial<DescriptorProto_ExtensionRange>,
    ): DescriptorProto_ExtensionRange {
      return DescriptorProto_ExtensionRange.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<DescriptorProto_ExtensionRange>,
    ): DescriptorProto_ExtensionRange {
      const message = createBaseDescriptorProto_ExtensionRange();
      message.start = object.start ?? 0;
      message.end = object.end ?? 0;
      message.options =
        object.options !== undefined && object.options !== null
          ? ExtensionRangeOptions.fromPartial(object.options)
          : undefined;
      return message;
    },
  };

function createBaseDescriptorProto_ReservedRange(): DescriptorProto_ReservedRange {
  return { start: 0, end: 0 };
}

export const DescriptorProto_ReservedRange: MessageFns<DescriptorProto_ReservedRange> =
  {
    fromJSON(object: any): DescriptorProto_ReservedRange {
      return {
        start: isSet(object.start) ? globalThis.Number(object.start) : 0,
        end: isSet(object.end) ? globalThis.Number(object.end) : 0,
      };
    },

    toJSON(message: DescriptorProto_ReservedRange): unknown {
      const obj: any = {};
      if (message.start !== undefined && message.start !== 0) {
        obj.start = Math.round(message.start);
      }
      if (message.end !== undefined && message.end !== 0) {
        obj.end = Math.round(message.end);
      }
      return obj;
    },

    create(
      base?: DeepPartial<DescriptorProto_ReservedRange>,
    ): DescriptorProto_ReservedRange {
      return DescriptorProto_ReservedRange.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<DescriptorProto_ReservedRange>,
    ): DescriptorProto_ReservedRange {
      const message = createBaseDescriptorProto_ReservedRange();
      message.start = object.start ?? 0;
      message.end = object.end ?? 0;
      return message;
    },
  };

function createBaseExtensionRangeOptions(): ExtensionRangeOptions {
  return {
    uninterpreted_option: [],
    declaration: [],
    features: undefined,
    verification: ExtensionRangeOptions_VerificationState.UNVERIFIED,
  };
}

export const ExtensionRangeOptions: MessageFns<ExtensionRangeOptions> = {
  fromJSON(object: any): ExtensionRangeOptions {
    return {
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
      declaration: globalThis.Array.isArray(object?.declaration)
        ? object.declaration.map((e: any) =>
            ExtensionRangeOptions_Declaration.fromJSON(e),
          )
        : [],
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      verification: isSet(object.verification)
        ? extensionRangeOptions_VerificationStateFromJSON(object.verification)
        : ExtensionRangeOptions_VerificationState.UNVERIFIED,
    };
  },

  toJSON(message: ExtensionRangeOptions): unknown {
    const obj: any = {};
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    if (message.declaration?.length) {
      obj.declaration = message.declaration.map((e) =>
        ExtensionRangeOptions_Declaration.toJSON(e),
      );
    }
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (
      message.verification !== undefined &&
      message.verification !==
        ExtensionRangeOptions_VerificationState.DECLARATION
    ) {
      obj.verification = extensionRangeOptions_VerificationStateToJSON(
        message.verification,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionRangeOptions>): ExtensionRangeOptions {
    return ExtensionRangeOptions.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ExtensionRangeOptions>,
  ): ExtensionRangeOptions {
    const message = createBaseExtensionRangeOptions();
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    message.declaration =
      object.declaration?.map((e) =>
        ExtensionRangeOptions_Declaration.fromPartial(e),
      ) || [];
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.verification =
      object.verification ?? ExtensionRangeOptions_VerificationState.UNVERIFIED;
    return message;
  },
};

function createBaseExtensionRangeOptions_Declaration(): ExtensionRangeOptions_Declaration {
  return {
    number: 0,
    full_name: "",
    type: "",
    reserved: false,
    repeated: false,
  };
}

export const ExtensionRangeOptions_Declaration: MessageFns<ExtensionRangeOptions_Declaration> =
  {
    fromJSON(object: any): ExtensionRangeOptions_Declaration {
      return {
        number: isSet(object.number) ? globalThis.Number(object.number) : 0,
        full_name: isSet(object.full_name)
          ? globalThis.String(object.full_name)
          : "",
        type: isSet(object.type) ? globalThis.String(object.type) : "",
        reserved: isSet(object.reserved)
          ? globalThis.Boolean(object.reserved)
          : false,
        repeated: isSet(object.repeated)
          ? globalThis.Boolean(object.repeated)
          : false,
      };
    },

    toJSON(message: ExtensionRangeOptions_Declaration): unknown {
      const obj: any = {};
      if (message.number !== undefined && message.number !== 0) {
        obj.number = Math.round(message.number);
      }
      if (message.full_name !== undefined && message.full_name !== "") {
        obj.full_name = message.full_name;
      }
      if (message.type !== undefined && message.type !== "") {
        obj.type = message.type;
      }
      if (message.reserved !== undefined && message.reserved !== false) {
        obj.reserved = message.reserved;
      }
      if (message.repeated !== undefined && message.repeated !== false) {
        obj.repeated = message.repeated;
      }
      return obj;
    },

    create(
      base?: DeepPartial<ExtensionRangeOptions_Declaration>,
    ): ExtensionRangeOptions_Declaration {
      return ExtensionRangeOptions_Declaration.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ExtensionRangeOptions_Declaration>,
    ): ExtensionRangeOptions_Declaration {
      const message = createBaseExtensionRangeOptions_Declaration();
      message.number = object.number ?? 0;
      message.full_name = object.full_name ?? "";
      message.type = object.type ?? "";
      message.reserved = object.reserved ?? false;
      message.repeated = object.repeated ?? false;
      return message;
    },
  };

function createBaseFieldDescriptorProto(): FieldDescriptorProto {
  return {
    name: "",
    number: 0,
    label: FieldDescriptorProto_Label.LABEL_OPTIONAL,
    type: FieldDescriptorProto_Type.TYPE_DOUBLE,
    type_name: "",
    extendee: "",
    default_value: "",
    oneof_index: 0,
    json_name: "",
    options: undefined,
    proto3_optional: false,
  };
}

export const FieldDescriptorProto: MessageFns<FieldDescriptorProto> = {
  fromJSON(object: any): FieldDescriptorProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      label: isSet(object.label)
        ? fieldDescriptorProto_LabelFromJSON(object.label)
        : FieldDescriptorProto_Label.LABEL_OPTIONAL,
      type: isSet(object.type)
        ? fieldDescriptorProto_TypeFromJSON(object.type)
        : FieldDescriptorProto_Type.TYPE_DOUBLE,
      type_name: isSet(object.type_name)
        ? globalThis.String(object.type_name)
        : "",
      extendee: isSet(object.extendee)
        ? globalThis.String(object.extendee)
        : "",
      default_value: isSet(object.default_value)
        ? globalThis.String(object.default_value)
        : "",
      oneof_index: isSet(object.oneof_index)
        ? globalThis.Number(object.oneof_index)
        : 0,
      json_name: isSet(object.json_name)
        ? globalThis.String(object.json_name)
        : "",
      options: isSet(object.options)
        ? FieldOptions.fromJSON(object.options)
        : undefined,
      proto3_optional: isSet(object.proto3_optional)
        ? globalThis.Boolean(object.proto3_optional)
        : false,
    };
  },

  toJSON(message: FieldDescriptorProto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== undefined && message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (
      message.label !== undefined &&
      message.label !== FieldDescriptorProto_Label.LABEL_OPTIONAL
    ) {
      obj.label = fieldDescriptorProto_LabelToJSON(message.label);
    }
    if (
      message.type !== undefined &&
      message.type !== FieldDescriptorProto_Type.TYPE_DOUBLE
    ) {
      obj.type = fieldDescriptorProto_TypeToJSON(message.type);
    }
    if (message.type_name !== undefined && message.type_name !== "") {
      obj.type_name = message.type_name;
    }
    if (message.extendee !== undefined && message.extendee !== "") {
      obj.extendee = message.extendee;
    }
    if (message.default_value !== undefined && message.default_value !== "") {
      obj.default_value = message.default_value;
    }
    if (message.oneof_index !== undefined && message.oneof_index !== 0) {
      obj.oneof_index = Math.round(message.oneof_index);
    }
    if (message.json_name !== undefined && message.json_name !== "") {
      obj.json_name = message.json_name;
    }
    if (message.options !== undefined) {
      obj.options = FieldOptions.toJSON(message.options);
    }
    if (
      message.proto3_optional !== undefined &&
      message.proto3_optional !== false
    ) {
      obj.proto3_optional = message.proto3_optional;
    }
    return obj;
  },

  create(base?: DeepPartial<FieldDescriptorProto>): FieldDescriptorProto {
    return FieldDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FieldDescriptorProto>): FieldDescriptorProto {
    const message = createBaseFieldDescriptorProto();
    message.name = object.name ?? "";
    message.number = object.number ?? 0;
    message.label = object.label ?? FieldDescriptorProto_Label.LABEL_OPTIONAL;
    message.type = object.type ?? FieldDescriptorProto_Type.TYPE_DOUBLE;
    message.type_name = object.type_name ?? "";
    message.extendee = object.extendee ?? "";
    message.default_value = object.default_value ?? "";
    message.oneof_index = object.oneof_index ?? 0;
    message.json_name = object.json_name ?? "";
    message.options =
      object.options !== undefined && object.options !== null
        ? FieldOptions.fromPartial(object.options)
        : undefined;
    message.proto3_optional = object.proto3_optional ?? false;
    return message;
  },
};

function createBaseOneofDescriptorProto(): OneofDescriptorProto {
  return { name: "", options: undefined };
}

export const OneofDescriptorProto: MessageFns<OneofDescriptorProto> = {
  fromJSON(object: any): OneofDescriptorProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      options: isSet(object.options)
        ? OneofOptions.fromJSON(object.options)
        : undefined,
    };
  },

  toJSON(message: OneofDescriptorProto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.options !== undefined) {
      obj.options = OneofOptions.toJSON(message.options);
    }
    return obj;
  },

  create(base?: DeepPartial<OneofDescriptorProto>): OneofDescriptorProto {
    return OneofDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OneofDescriptorProto>): OneofDescriptorProto {
    const message = createBaseOneofDescriptorProto();
    message.name = object.name ?? "";
    message.options =
      object.options !== undefined && object.options !== null
        ? OneofOptions.fromPartial(object.options)
        : undefined;
    return message;
  },
};

function createBaseEnumDescriptorProto(): EnumDescriptorProto {
  return {
    name: "",
    value: [],
    options: undefined,
    reserved_range: [],
    reserved_name: [],
  };
}

export const EnumDescriptorProto: MessageFns<EnumDescriptorProto> = {
  fromJSON(object: any): EnumDescriptorProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: globalThis.Array.isArray(object?.value)
        ? object.value.map((e: any) => EnumValueDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? EnumOptions.fromJSON(object.options)
        : undefined,
      reserved_range: globalThis.Array.isArray(object?.reserved_range)
        ? object.reserved_range.map((e: any) =>
            EnumDescriptorProto_EnumReservedRange.fromJSON(e),
          )
        : [],
      reserved_name: globalThis.Array.isArray(object?.reserved_name)
        ? object.reserved_name.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: EnumDescriptorProto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.value?.length) {
      obj.value = message.value.map((e) => EnumValueDescriptorProto.toJSON(e));
    }
    if (message.options !== undefined) {
      obj.options = EnumOptions.toJSON(message.options);
    }
    if (message.reserved_range?.length) {
      obj.reserved_range = message.reserved_range.map((e) =>
        EnumDescriptorProto_EnumReservedRange.toJSON(e),
      );
    }
    if (message.reserved_name?.length) {
      obj.reserved_name = message.reserved_name;
    }
    return obj;
  },

  create(base?: DeepPartial<EnumDescriptorProto>): EnumDescriptorProto {
    return EnumDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnumDescriptorProto>): EnumDescriptorProto {
    const message = createBaseEnumDescriptorProto();
    message.name = object.name ?? "";
    message.value =
      object.value?.map((e) => EnumValueDescriptorProto.fromPartial(e)) || [];
    message.options =
      object.options !== undefined && object.options !== null
        ? EnumOptions.fromPartial(object.options)
        : undefined;
    message.reserved_range =
      object.reserved_range?.map((e) =>
        EnumDescriptorProto_EnumReservedRange.fromPartial(e),
      ) || [];
    message.reserved_name = object.reserved_name?.map((e) => e) || [];
    return message;
  },
};

function createBaseEnumDescriptorProto_EnumReservedRange(): EnumDescriptorProto_EnumReservedRange {
  return { start: 0, end: 0 };
}

export const EnumDescriptorProto_EnumReservedRange: MessageFns<EnumDescriptorProto_EnumReservedRange> =
  {
    fromJSON(object: any): EnumDescriptorProto_EnumReservedRange {
      return {
        start: isSet(object.start) ? globalThis.Number(object.start) : 0,
        end: isSet(object.end) ? globalThis.Number(object.end) : 0,
      };
    },

    toJSON(message: EnumDescriptorProto_EnumReservedRange): unknown {
      const obj: any = {};
      if (message.start !== undefined && message.start !== 0) {
        obj.start = Math.round(message.start);
      }
      if (message.end !== undefined && message.end !== 0) {
        obj.end = Math.round(message.end);
      }
      return obj;
    },

    create(
      base?: DeepPartial<EnumDescriptorProto_EnumReservedRange>,
    ): EnumDescriptorProto_EnumReservedRange {
      return EnumDescriptorProto_EnumReservedRange.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<EnumDescriptorProto_EnumReservedRange>,
    ): EnumDescriptorProto_EnumReservedRange {
      const message = createBaseEnumDescriptorProto_EnumReservedRange();
      message.start = object.start ?? 0;
      message.end = object.end ?? 0;
      return message;
    },
  };

function createBaseEnumValueDescriptorProto(): EnumValueDescriptorProto {
  return { name: "", number: 0, options: undefined };
}

export const EnumValueDescriptorProto: MessageFns<EnumValueDescriptorProto> = {
  fromJSON(object: any): EnumValueDescriptorProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      options: isSet(object.options)
        ? EnumValueOptions.fromJSON(object.options)
        : undefined,
    };
  },

  toJSON(message: EnumValueDescriptorProto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== undefined && message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.options !== undefined) {
      obj.options = EnumValueOptions.toJSON(message.options);
    }
    return obj;
  },

  create(
    base?: DeepPartial<EnumValueDescriptorProto>,
  ): EnumValueDescriptorProto {
    return EnumValueDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<EnumValueDescriptorProto>,
  ): EnumValueDescriptorProto {
    const message = createBaseEnumValueDescriptorProto();
    message.name = object.name ?? "";
    message.number = object.number ?? 0;
    message.options =
      object.options !== undefined && object.options !== null
        ? EnumValueOptions.fromPartial(object.options)
        : undefined;
    return message;
  },
};

function createBaseServiceDescriptorProto(): ServiceDescriptorProto {
  return { name: "", method: [], options: undefined };
}

export const ServiceDescriptorProto: MessageFns<ServiceDescriptorProto> = {
  fromJSON(object: any): ServiceDescriptorProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      method: globalThis.Array.isArray(object?.method)
        ? object.method.map((e: any) => MethodDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? ServiceOptions.fromJSON(object.options)
        : undefined,
    };
  },

  toJSON(message: ServiceDescriptorProto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.method?.length) {
      obj.method = message.method.map((e) => MethodDescriptorProto.toJSON(e));
    }
    if (message.options !== undefined) {
      obj.options = ServiceOptions.toJSON(message.options);
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceDescriptorProto>): ServiceDescriptorProto {
    return ServiceDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ServiceDescriptorProto>,
  ): ServiceDescriptorProto {
    const message = createBaseServiceDescriptorProto();
    message.name = object.name ?? "";
    message.method =
      object.method?.map((e) => MethodDescriptorProto.fromPartial(e)) || [];
    message.options =
      object.options !== undefined && object.options !== null
        ? ServiceOptions.fromPartial(object.options)
        : undefined;
    return message;
  },
};

function createBaseMethodDescriptorProto(): MethodDescriptorProto {
  return {
    name: "",
    input_type: "",
    output_type: "",
    options: undefined,
    client_streaming: false,
    server_streaming: false,
  };
}

export const MethodDescriptorProto: MessageFns<MethodDescriptorProto> = {
  fromJSON(object: any): MethodDescriptorProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      input_type: isSet(object.input_type)
        ? globalThis.String(object.input_type)
        : "",
      output_type: isSet(object.output_type)
        ? globalThis.String(object.output_type)
        : "",
      options: isSet(object.options)
        ? MethodOptions.fromJSON(object.options)
        : undefined,
      client_streaming: isSet(object.client_streaming)
        ? globalThis.Boolean(object.client_streaming)
        : false,
      server_streaming: isSet(object.server_streaming)
        ? globalThis.Boolean(object.server_streaming)
        : false,
    };
  },

  toJSON(message: MethodDescriptorProto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.input_type !== undefined && message.input_type !== "") {
      obj.input_type = message.input_type;
    }
    if (message.output_type !== undefined && message.output_type !== "") {
      obj.output_type = message.output_type;
    }
    if (message.options !== undefined) {
      obj.options = MethodOptions.toJSON(message.options);
    }
    if (
      message.client_streaming !== undefined &&
      message.client_streaming !== false
    ) {
      obj.client_streaming = message.client_streaming;
    }
    if (
      message.server_streaming !== undefined &&
      message.server_streaming !== false
    ) {
      obj.server_streaming = message.server_streaming;
    }
    return obj;
  },

  create(base?: DeepPartial<MethodDescriptorProto>): MethodDescriptorProto {
    return MethodDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MethodDescriptorProto>,
  ): MethodDescriptorProto {
    const message = createBaseMethodDescriptorProto();
    message.name = object.name ?? "";
    message.input_type = object.input_type ?? "";
    message.output_type = object.output_type ?? "";
    message.options =
      object.options !== undefined && object.options !== null
        ? MethodOptions.fromPartial(object.options)
        : undefined;
    message.client_streaming = object.client_streaming ?? false;
    message.server_streaming = object.server_streaming ?? false;
    return message;
  },
};

function createBaseFileOptions(): FileOptions {
  return {
    java_package: "",
    java_outer_classname: "",
    java_multiple_files: false,
    java_generate_equals_and_hash: false,
    java_string_check_utf8: false,
    optimize_for: FileOptions_OptimizeMode.SPEED,
    go_package: "",
    cc_generic_services: false,
    java_generic_services: false,
    py_generic_services: false,
    deprecated: false,
    cc_enable_arenas: true,
    objc_class_prefix: "",
    csharp_namespace: "",
    swift_prefix: "",
    php_class_prefix: "",
    php_namespace: "",
    php_metadata_namespace: "",
    ruby_package: "",
    features: undefined,
    uninterpreted_option: [],
  };
}

export const FileOptions: MessageFns<FileOptions> = {
  fromJSON(object: any): FileOptions {
    return {
      java_package: isSet(object.java_package)
        ? globalThis.String(object.java_package)
        : "",
      java_outer_classname: isSet(object.java_outer_classname)
        ? globalThis.String(object.java_outer_classname)
        : "",
      java_multiple_files: isSet(object.java_multiple_files)
        ? globalThis.Boolean(object.java_multiple_files)
        : false,
      java_generate_equals_and_hash: isSet(object.java_generate_equals_and_hash)
        ? globalThis.Boolean(object.java_generate_equals_and_hash)
        : false,
      java_string_check_utf8: isSet(object.java_string_check_utf8)
        ? globalThis.Boolean(object.java_string_check_utf8)
        : false,
      optimize_for: isSet(object.optimize_for)
        ? fileOptions_OptimizeModeFromJSON(object.optimize_for)
        : FileOptions_OptimizeMode.SPEED,
      go_package: isSet(object.go_package)
        ? globalThis.String(object.go_package)
        : "",
      cc_generic_services: isSet(object.cc_generic_services)
        ? globalThis.Boolean(object.cc_generic_services)
        : false,
      java_generic_services: isSet(object.java_generic_services)
        ? globalThis.Boolean(object.java_generic_services)
        : false,
      py_generic_services: isSet(object.py_generic_services)
        ? globalThis.Boolean(object.py_generic_services)
        : false,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      cc_enable_arenas: isSet(object.cc_enable_arenas)
        ? globalThis.Boolean(object.cc_enable_arenas)
        : true,
      objc_class_prefix: isSet(object.objc_class_prefix)
        ? globalThis.String(object.objc_class_prefix)
        : "",
      csharp_namespace: isSet(object.csharp_namespace)
        ? globalThis.String(object.csharp_namespace)
        : "",
      swift_prefix: isSet(object.swift_prefix)
        ? globalThis.String(object.swift_prefix)
        : "",
      php_class_prefix: isSet(object.php_class_prefix)
        ? globalThis.String(object.php_class_prefix)
        : "",
      php_namespace: isSet(object.php_namespace)
        ? globalThis.String(object.php_namespace)
        : "",
      php_metadata_namespace: isSet(object.php_metadata_namespace)
        ? globalThis.String(object.php_metadata_namespace)
        : "",
      ruby_package: isSet(object.ruby_package)
        ? globalThis.String(object.ruby_package)
        : "",
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: FileOptions): unknown {
    const obj: any = {};
    if (message.java_package !== undefined && message.java_package !== "") {
      obj.java_package = message.java_package;
    }
    if (
      message.java_outer_classname !== undefined &&
      message.java_outer_classname !== ""
    ) {
      obj.java_outer_classname = message.java_outer_classname;
    }
    if (
      message.java_multiple_files !== undefined &&
      message.java_multiple_files !== false
    ) {
      obj.java_multiple_files = message.java_multiple_files;
    }
    if (
      message.java_generate_equals_and_hash !== undefined &&
      message.java_generate_equals_and_hash !== false
    ) {
      obj.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
    }
    if (
      message.java_string_check_utf8 !== undefined &&
      message.java_string_check_utf8 !== false
    ) {
      obj.java_string_check_utf8 = message.java_string_check_utf8;
    }
    if (
      message.optimize_for !== undefined &&
      message.optimize_for !== FileOptions_OptimizeMode.SPEED
    ) {
      obj.optimize_for = fileOptions_OptimizeModeToJSON(message.optimize_for);
    }
    if (message.go_package !== undefined && message.go_package !== "") {
      obj.go_package = message.go_package;
    }
    if (
      message.cc_generic_services !== undefined &&
      message.cc_generic_services !== false
    ) {
      obj.cc_generic_services = message.cc_generic_services;
    }
    if (
      message.java_generic_services !== undefined &&
      message.java_generic_services !== false
    ) {
      obj.java_generic_services = message.java_generic_services;
    }
    if (
      message.py_generic_services !== undefined &&
      message.py_generic_services !== false
    ) {
      obj.py_generic_services = message.py_generic_services;
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (
      message.cc_enable_arenas !== undefined &&
      message.cc_enable_arenas !== true
    ) {
      obj.cc_enable_arenas = message.cc_enable_arenas;
    }
    if (
      message.objc_class_prefix !== undefined &&
      message.objc_class_prefix !== ""
    ) {
      obj.objc_class_prefix = message.objc_class_prefix;
    }
    if (
      message.csharp_namespace !== undefined &&
      message.csharp_namespace !== ""
    ) {
      obj.csharp_namespace = message.csharp_namespace;
    }
    if (message.swift_prefix !== undefined && message.swift_prefix !== "") {
      obj.swift_prefix = message.swift_prefix;
    }
    if (
      message.php_class_prefix !== undefined &&
      message.php_class_prefix !== ""
    ) {
      obj.php_class_prefix = message.php_class_prefix;
    }
    if (message.php_namespace !== undefined && message.php_namespace !== "") {
      obj.php_namespace = message.php_namespace;
    }
    if (
      message.php_metadata_namespace !== undefined &&
      message.php_metadata_namespace !== ""
    ) {
      obj.php_metadata_namespace = message.php_metadata_namespace;
    }
    if (message.ruby_package !== undefined && message.ruby_package !== "") {
      obj.ruby_package = message.ruby_package;
    }
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<FileOptions>): FileOptions {
    return FileOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileOptions>): FileOptions {
    const message = createBaseFileOptions();
    message.java_package = object.java_package ?? "";
    message.java_outer_classname = object.java_outer_classname ?? "";
    message.java_multiple_files = object.java_multiple_files ?? false;
    message.java_generate_equals_and_hash =
      object.java_generate_equals_and_hash ?? false;
    message.java_string_check_utf8 = object.java_string_check_utf8 ?? false;
    message.optimize_for =
      object.optimize_for ?? FileOptions_OptimizeMode.SPEED;
    message.go_package = object.go_package ?? "";
    message.cc_generic_services = object.cc_generic_services ?? false;
    message.java_generic_services = object.java_generic_services ?? false;
    message.py_generic_services = object.py_generic_services ?? false;
    message.deprecated = object.deprecated ?? false;
    message.cc_enable_arenas = object.cc_enable_arenas ?? true;
    message.objc_class_prefix = object.objc_class_prefix ?? "";
    message.csharp_namespace = object.csharp_namespace ?? "";
    message.swift_prefix = object.swift_prefix ?? "";
    message.php_class_prefix = object.php_class_prefix ?? "";
    message.php_namespace = object.php_namespace ?? "";
    message.php_metadata_namespace = object.php_metadata_namespace ?? "";
    message.ruby_package = object.ruby_package ?? "";
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseMessageOptions(): MessageOptions {
  return {
    message_set_wire_format: false,
    no_standard_descriptor_accessor: false,
    deprecated: false,
    map_entry: false,
    deprecated_legacy_json_field_conflicts: false,
    features: undefined,
    uninterpreted_option: [],
  };
}

export const MessageOptions: MessageFns<MessageOptions> = {
  fromJSON(object: any): MessageOptions {
    return {
      message_set_wire_format: isSet(object.message_set_wire_format)
        ? globalThis.Boolean(object.message_set_wire_format)
        : false,
      no_standard_descriptor_accessor: isSet(
        object.no_standard_descriptor_accessor,
      )
        ? globalThis.Boolean(object.no_standard_descriptor_accessor)
        : false,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      map_entry: isSet(object.map_entry)
        ? globalThis.Boolean(object.map_entry)
        : false,
      deprecated_legacy_json_field_conflicts: isSet(
        object.deprecated_legacy_json_field_conflicts,
      )
        ? globalThis.Boolean(object.deprecated_legacy_json_field_conflicts)
        : false,
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: MessageOptions): unknown {
    const obj: any = {};
    if (
      message.message_set_wire_format !== undefined &&
      message.message_set_wire_format !== false
    ) {
      obj.message_set_wire_format = message.message_set_wire_format;
    }
    if (
      message.no_standard_descriptor_accessor !== undefined &&
      message.no_standard_descriptor_accessor !== false
    ) {
      obj.no_standard_descriptor_accessor =
        message.no_standard_descriptor_accessor;
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.map_entry !== undefined && message.map_entry !== false) {
      obj.map_entry = message.map_entry;
    }
    if (
      message.deprecated_legacy_json_field_conflicts !== undefined &&
      message.deprecated_legacy_json_field_conflicts !== false
    ) {
      obj.deprecated_legacy_json_field_conflicts =
        message.deprecated_legacy_json_field_conflicts;
    }
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<MessageOptions>): MessageOptions {
    return MessageOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageOptions>): MessageOptions {
    const message = createBaseMessageOptions();
    message.message_set_wire_format = object.message_set_wire_format ?? false;
    message.no_standard_descriptor_accessor =
      object.no_standard_descriptor_accessor ?? false;
    message.deprecated = object.deprecated ?? false;
    message.map_entry = object.map_entry ?? false;
    message.deprecated_legacy_json_field_conflicts =
      object.deprecated_legacy_json_field_conflicts ?? false;
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseFieldOptions(): FieldOptions {
  return {
    ctype: FieldOptions_CType.STRING,
    packed: false,
    jstype: FieldOptions_JSType.JS_NORMAL,
    lazy: false,
    unverified_lazy: false,
    deprecated: false,
    weak: false,
    debug_redact: false,
    retention: FieldOptions_OptionRetention.RETENTION_UNKNOWN,
    targets: [],
    edition_defaults: [],
    features: undefined,
    feature_support: undefined,
    uninterpreted_option: [],
  };
}

export const FieldOptions: MessageFns<FieldOptions> = {
  fromJSON(object: any): FieldOptions {
    return {
      ctype: isSet(object.ctype)
        ? fieldOptions_CTypeFromJSON(object.ctype)
        : FieldOptions_CType.STRING,
      packed: isSet(object.packed) ? globalThis.Boolean(object.packed) : false,
      jstype: isSet(object.jstype)
        ? fieldOptions_JSTypeFromJSON(object.jstype)
        : FieldOptions_JSType.JS_NORMAL,
      lazy: isSet(object.lazy) ? globalThis.Boolean(object.lazy) : false,
      unverified_lazy: isSet(object.unverified_lazy)
        ? globalThis.Boolean(object.unverified_lazy)
        : false,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      weak: isSet(object.weak) ? globalThis.Boolean(object.weak) : false,
      debug_redact: isSet(object.debug_redact)
        ? globalThis.Boolean(object.debug_redact)
        : false,
      retention: isSet(object.retention)
        ? fieldOptions_OptionRetentionFromJSON(object.retention)
        : FieldOptions_OptionRetention.RETENTION_UNKNOWN,
      targets: globalThis.Array.isArray(object?.targets)
        ? object.targets.map((e: any) =>
            fieldOptions_OptionTargetTypeFromJSON(e),
          )
        : [],
      edition_defaults: globalThis.Array.isArray(object?.edition_defaults)
        ? object.edition_defaults.map((e: any) =>
            FieldOptions_EditionDefault.fromJSON(e),
          )
        : [],
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      feature_support: isSet(object.feature_support)
        ? FieldOptions_FeatureSupport.fromJSON(object.feature_support)
        : undefined,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: FieldOptions): unknown {
    const obj: any = {};
    if (
      message.ctype !== undefined &&
      message.ctype !== FieldOptions_CType.STRING
    ) {
      obj.ctype = fieldOptions_CTypeToJSON(message.ctype);
    }
    if (message.packed !== undefined && message.packed !== false) {
      obj.packed = message.packed;
    }
    if (
      message.jstype !== undefined &&
      message.jstype !== FieldOptions_JSType.JS_NORMAL
    ) {
      obj.jstype = fieldOptions_JSTypeToJSON(message.jstype);
    }
    if (message.lazy !== undefined && message.lazy !== false) {
      obj.lazy = message.lazy;
    }
    if (
      message.unverified_lazy !== undefined &&
      message.unverified_lazy !== false
    ) {
      obj.unverified_lazy = message.unverified_lazy;
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.weak !== undefined && message.weak !== false) {
      obj.weak = message.weak;
    }
    if (message.debug_redact !== undefined && message.debug_redact !== false) {
      obj.debug_redact = message.debug_redact;
    }
    if (
      message.retention !== undefined &&
      message.retention !== FieldOptions_OptionRetention.RETENTION_UNKNOWN
    ) {
      obj.retention = fieldOptions_OptionRetentionToJSON(message.retention);
    }
    if (message.targets?.length) {
      obj.targets = message.targets.map((e) =>
        fieldOptions_OptionTargetTypeToJSON(e),
      );
    }
    if (message.edition_defaults?.length) {
      obj.edition_defaults = message.edition_defaults.map((e) =>
        FieldOptions_EditionDefault.toJSON(e),
      );
    }
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.feature_support !== undefined) {
      obj.feature_support = FieldOptions_FeatureSupport.toJSON(
        message.feature_support,
      );
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<FieldOptions>): FieldOptions {
    return FieldOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FieldOptions>): FieldOptions {
    const message = createBaseFieldOptions();
    message.ctype = object.ctype ?? FieldOptions_CType.STRING;
    message.packed = object.packed ?? false;
    message.jstype = object.jstype ?? FieldOptions_JSType.JS_NORMAL;
    message.lazy = object.lazy ?? false;
    message.unverified_lazy = object.unverified_lazy ?? false;
    message.deprecated = object.deprecated ?? false;
    message.weak = object.weak ?? false;
    message.debug_redact = object.debug_redact ?? false;
    message.retention =
      object.retention ?? FieldOptions_OptionRetention.RETENTION_UNKNOWN;
    message.targets = object.targets?.map((e) => e) || [];
    message.edition_defaults =
      object.edition_defaults?.map((e) =>
        FieldOptions_EditionDefault.fromPartial(e),
      ) || [];
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.feature_support =
      object.feature_support !== undefined && object.feature_support !== null
        ? FieldOptions_FeatureSupport.fromPartial(object.feature_support)
        : undefined;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseFieldOptions_EditionDefault(): FieldOptions_EditionDefault {
  return { edition: Edition.EDITION_UNKNOWN, value: "" };
}

export const FieldOptions_EditionDefault: MessageFns<FieldOptions_EditionDefault> =
  {
    fromJSON(object: any): FieldOptions_EditionDefault {
      return {
        edition: isSet(object.edition)
          ? editionFromJSON(object.edition)
          : Edition.EDITION_UNKNOWN,
        value: isSet(object.value) ? globalThis.String(object.value) : "",
      };
    },

    toJSON(message: FieldOptions_EditionDefault): unknown {
      const obj: any = {};
      if (
        message.edition !== undefined &&
        message.edition !== Edition.EDITION_UNKNOWN
      ) {
        obj.edition = editionToJSON(message.edition);
      }
      if (message.value !== undefined && message.value !== "") {
        obj.value = message.value;
      }
      return obj;
    },

    create(
      base?: DeepPartial<FieldOptions_EditionDefault>,
    ): FieldOptions_EditionDefault {
      return FieldOptions_EditionDefault.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<FieldOptions_EditionDefault>,
    ): FieldOptions_EditionDefault {
      const message = createBaseFieldOptions_EditionDefault();
      message.edition = object.edition ?? Edition.EDITION_UNKNOWN;
      message.value = object.value ?? "";
      return message;
    },
  };

function createBaseFieldOptions_FeatureSupport(): FieldOptions_FeatureSupport {
  return {
    edition_introduced: Edition.EDITION_UNKNOWN,
    edition_deprecated: Edition.EDITION_UNKNOWN,
    deprecation_warning: "",
    edition_removed: Edition.EDITION_UNKNOWN,
  };
}

export const FieldOptions_FeatureSupport: MessageFns<FieldOptions_FeatureSupport> =
  {
    fromJSON(object: any): FieldOptions_FeatureSupport {
      return {
        edition_introduced: isSet(object.edition_introduced)
          ? editionFromJSON(object.edition_introduced)
          : Edition.EDITION_UNKNOWN,
        edition_deprecated: isSet(object.edition_deprecated)
          ? editionFromJSON(object.edition_deprecated)
          : Edition.EDITION_UNKNOWN,
        deprecation_warning: isSet(object.deprecation_warning)
          ? globalThis.String(object.deprecation_warning)
          : "",
        edition_removed: isSet(object.edition_removed)
          ? editionFromJSON(object.edition_removed)
          : Edition.EDITION_UNKNOWN,
      };
    },

    toJSON(message: FieldOptions_FeatureSupport): unknown {
      const obj: any = {};
      if (
        message.edition_introduced !== undefined &&
        message.edition_introduced !== Edition.EDITION_UNKNOWN
      ) {
        obj.edition_introduced = editionToJSON(message.edition_introduced);
      }
      if (
        message.edition_deprecated !== undefined &&
        message.edition_deprecated !== Edition.EDITION_UNKNOWN
      ) {
        obj.edition_deprecated = editionToJSON(message.edition_deprecated);
      }
      if (
        message.deprecation_warning !== undefined &&
        message.deprecation_warning !== ""
      ) {
        obj.deprecation_warning = message.deprecation_warning;
      }
      if (
        message.edition_removed !== undefined &&
        message.edition_removed !== Edition.EDITION_UNKNOWN
      ) {
        obj.edition_removed = editionToJSON(message.edition_removed);
      }
      return obj;
    },

    create(
      base?: DeepPartial<FieldOptions_FeatureSupport>,
    ): FieldOptions_FeatureSupport {
      return FieldOptions_FeatureSupport.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<FieldOptions_FeatureSupport>,
    ): FieldOptions_FeatureSupport {
      const message = createBaseFieldOptions_FeatureSupport();
      message.edition_introduced =
        object.edition_introduced ?? Edition.EDITION_UNKNOWN;
      message.edition_deprecated =
        object.edition_deprecated ?? Edition.EDITION_UNKNOWN;
      message.deprecation_warning = object.deprecation_warning ?? "";
      message.edition_removed =
        object.edition_removed ?? Edition.EDITION_UNKNOWN;
      return message;
    },
  };

function createBaseOneofOptions(): OneofOptions {
  return { features: undefined, uninterpreted_option: [] };
}

export const OneofOptions: MessageFns<OneofOptions> = {
  fromJSON(object: any): OneofOptions {
    return {
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: OneofOptions): unknown {
    const obj: any = {};
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<OneofOptions>): OneofOptions {
    return OneofOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OneofOptions>): OneofOptions {
    const message = createBaseOneofOptions();
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseEnumOptions(): EnumOptions {
  return {
    allow_alias: false,
    deprecated: false,
    deprecated_legacy_json_field_conflicts: false,
    features: undefined,
    uninterpreted_option: [],
  };
}

export const EnumOptions: MessageFns<EnumOptions> = {
  fromJSON(object: any): EnumOptions {
    return {
      allow_alias: isSet(object.allow_alias)
        ? globalThis.Boolean(object.allow_alias)
        : false,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      deprecated_legacy_json_field_conflicts: isSet(
        object.deprecated_legacy_json_field_conflicts,
      )
        ? globalThis.Boolean(object.deprecated_legacy_json_field_conflicts)
        : false,
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: EnumOptions): unknown {
    const obj: any = {};
    if (message.allow_alias !== undefined && message.allow_alias !== false) {
      obj.allow_alias = message.allow_alias;
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (
      message.deprecated_legacy_json_field_conflicts !== undefined &&
      message.deprecated_legacy_json_field_conflicts !== false
    ) {
      obj.deprecated_legacy_json_field_conflicts =
        message.deprecated_legacy_json_field_conflicts;
    }
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<EnumOptions>): EnumOptions {
    return EnumOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnumOptions>): EnumOptions {
    const message = createBaseEnumOptions();
    message.allow_alias = object.allow_alias ?? false;
    message.deprecated = object.deprecated ?? false;
    message.deprecated_legacy_json_field_conflicts =
      object.deprecated_legacy_json_field_conflicts ?? false;
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseEnumValueOptions(): EnumValueOptions {
  return {
    deprecated: false,
    features: undefined,
    debug_redact: false,
    uninterpreted_option: [],
  };
}

export const EnumValueOptions: MessageFns<EnumValueOptions> = {
  fromJSON(object: any): EnumValueOptions {
    return {
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      debug_redact: isSet(object.debug_redact)
        ? globalThis.Boolean(object.debug_redact)
        : false,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: EnumValueOptions): unknown {
    const obj: any = {};
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.debug_redact !== undefined && message.debug_redact !== false) {
      obj.debug_redact = message.debug_redact;
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<EnumValueOptions>): EnumValueOptions {
    return EnumValueOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnumValueOptions>): EnumValueOptions {
    const message = createBaseEnumValueOptions();
    message.deprecated = object.deprecated ?? false;
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.debug_redact = object.debug_redact ?? false;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseServiceOptions(): ServiceOptions {
  return { features: undefined, deprecated: false, uninterpreted_option: [] };
}

export const ServiceOptions: MessageFns<ServiceOptions> = {
  fromJSON(object: any): ServiceOptions {
    return {
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: ServiceOptions): unknown {
    const obj: any = {};
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceOptions>): ServiceOptions {
    return ServiceOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceOptions>): ServiceOptions {
    const message = createBaseServiceOptions();
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.deprecated = object.deprecated ?? false;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseMethodOptions(): MethodOptions {
  return {
    deprecated: false,
    idempotency_level: MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN,
    features: undefined,
    uninterpreted_option: [],
  };
}

export const MethodOptions: MessageFns<MethodOptions> = {
  fromJSON(object: any): MethodOptions {
    return {
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      idempotency_level: isSet(object.idempotency_level)
        ? methodOptions_IdempotencyLevelFromJSON(object.idempotency_level)
        : MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN,
      features: isSet(object.features)
        ? FeatureSet.fromJSON(object.features)
        : undefined,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e: any) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: MethodOptions): unknown {
    const obj: any = {};
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (
      message.idempotency_level !== undefined &&
      message.idempotency_level !==
        MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN
    ) {
      obj.idempotency_level = methodOptions_IdempotencyLevelToJSON(
        message.idempotency_level,
      );
    }
    if (message.features !== undefined) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<MethodOptions>): MethodOptions {
    return MethodOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MethodOptions>): MethodOptions {
    const message = createBaseMethodOptions();
    message.deprecated = object.deprecated ?? false;
    message.idempotency_level =
      object.idempotency_level ??
      MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN;
    message.features =
      object.features !== undefined && object.features !== null
        ? FeatureSet.fromPartial(object.features)
        : undefined;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseUninterpretedOption(): UninterpretedOption {
  return {
    name: [],
    identifier_value: "",
    positive_int_value: 0,
    negative_int_value: 0,
    double_value: 0,
    string_value: new Uint8Array(0),
    aggregate_value: "",
  };
}

export const UninterpretedOption: MessageFns<UninterpretedOption> = {
  fromJSON(object: any): UninterpretedOption {
    return {
      name: globalThis.Array.isArray(object?.name)
        ? object.name.map((e: any) => UninterpretedOption_NamePart.fromJSON(e))
        : [],
      identifier_value: isSet(object.identifier_value)
        ? globalThis.String(object.identifier_value)
        : "",
      positive_int_value: isSet(object.positive_int_value)
        ? globalThis.Number(object.positive_int_value)
        : 0,
      negative_int_value: isSet(object.negative_int_value)
        ? globalThis.Number(object.negative_int_value)
        : 0,
      double_value: isSet(object.double_value)
        ? globalThis.Number(object.double_value)
        : 0,
      string_value: isSet(object.string_value)
        ? bytesFromBase64(object.string_value)
        : new Uint8Array(0),
      aggregate_value: isSet(object.aggregate_value)
        ? globalThis.String(object.aggregate_value)
        : "",
    };
  },

  toJSON(message: UninterpretedOption): unknown {
    const obj: any = {};
    if (message.name?.length) {
      obj.name = message.name.map((e) =>
        UninterpretedOption_NamePart.toJSON(e),
      );
    }
    if (
      message.identifier_value !== undefined &&
      message.identifier_value !== ""
    ) {
      obj.identifier_value = message.identifier_value;
    }
    if (
      message.positive_int_value !== undefined &&
      message.positive_int_value !== 0
    ) {
      obj.positive_int_value = Math.round(message.positive_int_value);
    }
    if (
      message.negative_int_value !== undefined &&
      message.negative_int_value !== 0
    ) {
      obj.negative_int_value = Math.round(message.negative_int_value);
    }
    if (message.double_value !== undefined && message.double_value !== 0) {
      obj.double_value = message.double_value;
    }
    if (
      message.string_value !== undefined &&
      message.string_value.length !== 0
    ) {
      obj.string_value = base64FromBytes(message.string_value);
    }
    if (
      message.aggregate_value !== undefined &&
      message.aggregate_value !== ""
    ) {
      obj.aggregate_value = message.aggregate_value;
    }
    return obj;
  },

  create(base?: DeepPartial<UninterpretedOption>): UninterpretedOption {
    return UninterpretedOption.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UninterpretedOption>): UninterpretedOption {
    const message = createBaseUninterpretedOption();
    message.name =
      object.name?.map((e) => UninterpretedOption_NamePart.fromPartial(e)) ||
      [];
    message.identifier_value = object.identifier_value ?? "";
    message.positive_int_value = object.positive_int_value ?? 0;
    message.negative_int_value = object.negative_int_value ?? 0;
    message.double_value = object.double_value ?? 0;
    message.string_value = object.string_value ?? new Uint8Array(0);
    message.aggregate_value = object.aggregate_value ?? "";
    return message;
  },
};

function createBaseUninterpretedOption_NamePart(): UninterpretedOption_NamePart {
  return { name_part: "", is_extension: false };
}

export const UninterpretedOption_NamePart: MessageFns<UninterpretedOption_NamePart> =
  {
    fromJSON(object: any): UninterpretedOption_NamePart {
      return {
        name_part: isSet(object.name_part)
          ? globalThis.String(object.name_part)
          : "",
        is_extension: isSet(object.is_extension)
          ? globalThis.Boolean(object.is_extension)
          : false,
      };
    },

    toJSON(message: UninterpretedOption_NamePart): unknown {
      const obj: any = {};
      if (message.name_part !== "") {
        obj.name_part = message.name_part;
      }
      if (message.is_extension !== false) {
        obj.is_extension = message.is_extension;
      }
      return obj;
    },

    create(
      base?: DeepPartial<UninterpretedOption_NamePart>,
    ): UninterpretedOption_NamePart {
      return UninterpretedOption_NamePart.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<UninterpretedOption_NamePart>,
    ): UninterpretedOption_NamePart {
      const message = createBaseUninterpretedOption_NamePart();
      message.name_part = object.name_part ?? "";
      message.is_extension = object.is_extension ?? false;
      return message;
    },
  };

function createBaseFeatureSet(): FeatureSet {
  return {
    field_presence: FeatureSet_FieldPresence.FIELD_PRESENCE_UNKNOWN,
    enum_type: FeatureSet_EnumType.ENUM_TYPE_UNKNOWN,
    repeated_field_encoding:
      FeatureSet_RepeatedFieldEncoding.REPEATED_FIELD_ENCODING_UNKNOWN,
    utf8_validation: FeatureSet_Utf8Validation.UTF8_VALIDATION_UNKNOWN,
    message_encoding: FeatureSet_MessageEncoding.MESSAGE_ENCODING_UNKNOWN,
    json_format: FeatureSet_JsonFormat.JSON_FORMAT_UNKNOWN,
  };
}

export const FeatureSet: MessageFns<FeatureSet> = {
  fromJSON(object: any): FeatureSet {
    return {
      field_presence: isSet(object.field_presence)
        ? featureSet_FieldPresenceFromJSON(object.field_presence)
        : FeatureSet_FieldPresence.FIELD_PRESENCE_UNKNOWN,
      enum_type: isSet(object.enum_type)
        ? featureSet_EnumTypeFromJSON(object.enum_type)
        : FeatureSet_EnumType.ENUM_TYPE_UNKNOWN,
      repeated_field_encoding: isSet(object.repeated_field_encoding)
        ? featureSet_RepeatedFieldEncodingFromJSON(
            object.repeated_field_encoding,
          )
        : FeatureSet_RepeatedFieldEncoding.REPEATED_FIELD_ENCODING_UNKNOWN,
      utf8_validation: isSet(object.utf8_validation)
        ? featureSet_Utf8ValidationFromJSON(object.utf8_validation)
        : FeatureSet_Utf8Validation.UTF8_VALIDATION_UNKNOWN,
      message_encoding: isSet(object.message_encoding)
        ? featureSet_MessageEncodingFromJSON(object.message_encoding)
        : FeatureSet_MessageEncoding.MESSAGE_ENCODING_UNKNOWN,
      json_format: isSet(object.json_format)
        ? featureSet_JsonFormatFromJSON(object.json_format)
        : FeatureSet_JsonFormat.JSON_FORMAT_UNKNOWN,
    };
  },

  toJSON(message: FeatureSet): unknown {
    const obj: any = {};
    if (
      message.field_presence !== undefined &&
      message.field_presence !== FeatureSet_FieldPresence.FIELD_PRESENCE_UNKNOWN
    ) {
      obj.field_presence = featureSet_FieldPresenceToJSON(
        message.field_presence,
      );
    }
    if (
      message.enum_type !== undefined &&
      message.enum_type !== FeatureSet_EnumType.ENUM_TYPE_UNKNOWN
    ) {
      obj.enum_type = featureSet_EnumTypeToJSON(message.enum_type);
    }
    if (
      message.repeated_field_encoding !== undefined &&
      message.repeated_field_encoding !==
        FeatureSet_RepeatedFieldEncoding.REPEATED_FIELD_ENCODING_UNKNOWN
    ) {
      obj.repeated_field_encoding = featureSet_RepeatedFieldEncodingToJSON(
        message.repeated_field_encoding,
      );
    }
    if (
      message.utf8_validation !== undefined &&
      message.utf8_validation !==
        FeatureSet_Utf8Validation.UTF8_VALIDATION_UNKNOWN
    ) {
      obj.utf8_validation = featureSet_Utf8ValidationToJSON(
        message.utf8_validation,
      );
    }
    if (
      message.message_encoding !== undefined &&
      message.message_encoding !==
        FeatureSet_MessageEncoding.MESSAGE_ENCODING_UNKNOWN
    ) {
      obj.message_encoding = featureSet_MessageEncodingToJSON(
        message.message_encoding,
      );
    }
    if (
      message.json_format !== undefined &&
      message.json_format !== FeatureSet_JsonFormat.JSON_FORMAT_UNKNOWN
    ) {
      obj.json_format = featureSet_JsonFormatToJSON(message.json_format);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureSet>): FeatureSet {
    return FeatureSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureSet>): FeatureSet {
    const message = createBaseFeatureSet();
    message.field_presence =
      object.field_presence ?? FeatureSet_FieldPresence.FIELD_PRESENCE_UNKNOWN;
    message.enum_type =
      object.enum_type ?? FeatureSet_EnumType.ENUM_TYPE_UNKNOWN;
    message.repeated_field_encoding =
      object.repeated_field_encoding ??
      FeatureSet_RepeatedFieldEncoding.REPEATED_FIELD_ENCODING_UNKNOWN;
    message.utf8_validation =
      object.utf8_validation ??
      FeatureSet_Utf8Validation.UTF8_VALIDATION_UNKNOWN;
    message.message_encoding =
      object.message_encoding ??
      FeatureSet_MessageEncoding.MESSAGE_ENCODING_UNKNOWN;
    message.json_format =
      object.json_format ?? FeatureSet_JsonFormat.JSON_FORMAT_UNKNOWN;
    return message;
  },
};

function createBaseFeatureSetDefaults(): FeatureSetDefaults {
  return {
    defaults: [],
    minimum_edition: Edition.EDITION_UNKNOWN,
    maximum_edition: Edition.EDITION_UNKNOWN,
  };
}

export const FeatureSetDefaults: MessageFns<FeatureSetDefaults> = {
  fromJSON(object: any): FeatureSetDefaults {
    return {
      defaults: globalThis.Array.isArray(object?.defaults)
        ? object.defaults.map((e: any) =>
            FeatureSetDefaults_FeatureSetEditionDefault.fromJSON(e),
          )
        : [],
      minimum_edition: isSet(object.minimum_edition)
        ? editionFromJSON(object.minimum_edition)
        : Edition.EDITION_UNKNOWN,
      maximum_edition: isSet(object.maximum_edition)
        ? editionFromJSON(object.maximum_edition)
        : Edition.EDITION_UNKNOWN,
    };
  },

  toJSON(message: FeatureSetDefaults): unknown {
    const obj: any = {};
    if (message.defaults?.length) {
      obj.defaults = message.defaults.map((e) =>
        FeatureSetDefaults_FeatureSetEditionDefault.toJSON(e),
      );
    }
    if (
      message.minimum_edition !== undefined &&
      message.minimum_edition !== Edition.EDITION_UNKNOWN
    ) {
      obj.minimum_edition = editionToJSON(message.minimum_edition);
    }
    if (
      message.maximum_edition !== undefined &&
      message.maximum_edition !== Edition.EDITION_UNKNOWN
    ) {
      obj.maximum_edition = editionToJSON(message.maximum_edition);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureSetDefaults>): FeatureSetDefaults {
    return FeatureSetDefaults.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureSetDefaults>): FeatureSetDefaults {
    const message = createBaseFeatureSetDefaults();
    message.defaults =
      object.defaults?.map((e) =>
        FeatureSetDefaults_FeatureSetEditionDefault.fromPartial(e),
      ) || [];
    message.minimum_edition = object.minimum_edition ?? Edition.EDITION_UNKNOWN;
    message.maximum_edition = object.maximum_edition ?? Edition.EDITION_UNKNOWN;
    return message;
  },
};

function createBaseFeatureSetDefaults_FeatureSetEditionDefault(): FeatureSetDefaults_FeatureSetEditionDefault {
  return {
    edition: Edition.EDITION_UNKNOWN,
    overridable_features: undefined,
    fixed_features: undefined,
  };
}

export const FeatureSetDefaults_FeatureSetEditionDefault: MessageFns<FeatureSetDefaults_FeatureSetEditionDefault> =
  {
    fromJSON(object: any): FeatureSetDefaults_FeatureSetEditionDefault {
      return {
        edition: isSet(object.edition)
          ? editionFromJSON(object.edition)
          : Edition.EDITION_UNKNOWN,
        overridable_features: isSet(object.overridable_features)
          ? FeatureSet.fromJSON(object.overridable_features)
          : undefined,
        fixed_features: isSet(object.fixed_features)
          ? FeatureSet.fromJSON(object.fixed_features)
          : undefined,
      };
    },

    toJSON(message: FeatureSetDefaults_FeatureSetEditionDefault): unknown {
      const obj: any = {};
      if (
        message.edition !== undefined &&
        message.edition !== Edition.EDITION_UNKNOWN
      ) {
        obj.edition = editionToJSON(message.edition);
      }
      if (message.overridable_features !== undefined) {
        obj.overridable_features = FeatureSet.toJSON(
          message.overridable_features,
        );
      }
      if (message.fixed_features !== undefined) {
        obj.fixed_features = FeatureSet.toJSON(message.fixed_features);
      }
      return obj;
    },

    create(
      base?: DeepPartial<FeatureSetDefaults_FeatureSetEditionDefault>,
    ): FeatureSetDefaults_FeatureSetEditionDefault {
      return FeatureSetDefaults_FeatureSetEditionDefault.fromPartial(
        base ?? {},
      );
    },
    fromPartial(
      object: DeepPartial<FeatureSetDefaults_FeatureSetEditionDefault>,
    ): FeatureSetDefaults_FeatureSetEditionDefault {
      const message = createBaseFeatureSetDefaults_FeatureSetEditionDefault();
      message.edition = object.edition ?? Edition.EDITION_UNKNOWN;
      message.overridable_features =
        object.overridable_features !== undefined &&
        object.overridable_features !== null
          ? FeatureSet.fromPartial(object.overridable_features)
          : undefined;
      message.fixed_features =
        object.fixed_features !== undefined && object.fixed_features !== null
          ? FeatureSet.fromPartial(object.fixed_features)
          : undefined;
      return message;
    },
  };

function createBaseSourceCodeInfo(): SourceCodeInfo {
  return { location: [] };
}

export const SourceCodeInfo: MessageFns<SourceCodeInfo> = {
  fromJSON(object: any): SourceCodeInfo {
    return {
      location: globalThis.Array.isArray(object?.location)
        ? object.location.map((e: any) => SourceCodeInfo_Location.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SourceCodeInfo): unknown {
    const obj: any = {};
    if (message.location?.length) {
      obj.location = message.location.map((e) =>
        SourceCodeInfo_Location.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<SourceCodeInfo>): SourceCodeInfo {
    return SourceCodeInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SourceCodeInfo>): SourceCodeInfo {
    const message = createBaseSourceCodeInfo();
    message.location =
      object.location?.map((e) => SourceCodeInfo_Location.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSourceCodeInfo_Location(): SourceCodeInfo_Location {
  return {
    path: [],
    span: [],
    leading_comments: "",
    trailing_comments: "",
    leading_detached_comments: [],
  };
}

export const SourceCodeInfo_Location: MessageFns<SourceCodeInfo_Location> = {
  fromJSON(object: any): SourceCodeInfo_Location {
    return {
      path: globalThis.Array.isArray(object?.path)
        ? object.path.map((e: any) => globalThis.Number(e))
        : [],
      span: globalThis.Array.isArray(object?.span)
        ? object.span.map((e: any) => globalThis.Number(e))
        : [],
      leading_comments: isSet(object.leading_comments)
        ? globalThis.String(object.leading_comments)
        : "",
      trailing_comments: isSet(object.trailing_comments)
        ? globalThis.String(object.trailing_comments)
        : "",
      leading_detached_comments: globalThis.Array.isArray(
        object?.leading_detached_comments,
      )
        ? object.leading_detached_comments.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SourceCodeInfo_Location): unknown {
    const obj: any = {};
    if (message.path?.length) {
      obj.path = message.path.map((e) => Math.round(e));
    }
    if (message.span?.length) {
      obj.span = message.span.map((e) => Math.round(e));
    }
    if (
      message.leading_comments !== undefined &&
      message.leading_comments !== ""
    ) {
      obj.leading_comments = message.leading_comments;
    }
    if (
      message.trailing_comments !== undefined &&
      message.trailing_comments !== ""
    ) {
      obj.trailing_comments = message.trailing_comments;
    }
    if (message.leading_detached_comments?.length) {
      obj.leading_detached_comments = message.leading_detached_comments;
    }
    return obj;
  },

  create(base?: DeepPartial<SourceCodeInfo_Location>): SourceCodeInfo_Location {
    return SourceCodeInfo_Location.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SourceCodeInfo_Location>,
  ): SourceCodeInfo_Location {
    const message = createBaseSourceCodeInfo_Location();
    message.path = object.path?.map((e) => e) || [];
    message.span = object.span?.map((e) => e) || [];
    message.leading_comments = object.leading_comments ?? "";
    message.trailing_comments = object.trailing_comments ?? "";
    message.leading_detached_comments =
      object.leading_detached_comments?.map((e) => e) || [];
    return message;
  },
};

function createBaseGeneratedCodeInfo(): GeneratedCodeInfo {
  return { annotation: [] };
}

export const GeneratedCodeInfo: MessageFns<GeneratedCodeInfo> = {
  fromJSON(object: any): GeneratedCodeInfo {
    return {
      annotation: globalThis.Array.isArray(object?.annotation)
        ? object.annotation.map((e: any) =>
            GeneratedCodeInfo_Annotation.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: GeneratedCodeInfo): unknown {
    const obj: any = {};
    if (message.annotation?.length) {
      obj.annotation = message.annotation.map((e) =>
        GeneratedCodeInfo_Annotation.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<GeneratedCodeInfo>): GeneratedCodeInfo {
    return GeneratedCodeInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GeneratedCodeInfo>): GeneratedCodeInfo {
    const message = createBaseGeneratedCodeInfo();
    message.annotation =
      object.annotation?.map((e) =>
        GeneratedCodeInfo_Annotation.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseGeneratedCodeInfo_Annotation(): GeneratedCodeInfo_Annotation {
  return {
    path: [],
    source_file: "",
    begin: 0,
    end: 0,
    semantic: GeneratedCodeInfo_Annotation_Semantic.NONE,
  };
}

export const GeneratedCodeInfo_Annotation: MessageFns<GeneratedCodeInfo_Annotation> =
  {
    fromJSON(object: any): GeneratedCodeInfo_Annotation {
      return {
        path: globalThis.Array.isArray(object?.path)
          ? object.path.map((e: any) => globalThis.Number(e))
          : [],
        source_file: isSet(object.source_file)
          ? globalThis.String(object.source_file)
          : "",
        begin: isSet(object.begin) ? globalThis.Number(object.begin) : 0,
        end: isSet(object.end) ? globalThis.Number(object.end) : 0,
        semantic: isSet(object.semantic)
          ? generatedCodeInfo_Annotation_SemanticFromJSON(object.semantic)
          : GeneratedCodeInfo_Annotation_Semantic.NONE,
      };
    },

    toJSON(message: GeneratedCodeInfo_Annotation): unknown {
      const obj: any = {};
      if (message.path?.length) {
        obj.path = message.path.map((e) => Math.round(e));
      }
      if (message.source_file !== undefined && message.source_file !== "") {
        obj.source_file = message.source_file;
      }
      if (message.begin !== undefined && message.begin !== 0) {
        obj.begin = Math.round(message.begin);
      }
      if (message.end !== undefined && message.end !== 0) {
        obj.end = Math.round(message.end);
      }
      if (
        message.semantic !== undefined &&
        message.semantic !== GeneratedCodeInfo_Annotation_Semantic.NONE
      ) {
        obj.semantic = generatedCodeInfo_Annotation_SemanticToJSON(
          message.semantic,
        );
      }
      return obj;
    },

    create(
      base?: DeepPartial<GeneratedCodeInfo_Annotation>,
    ): GeneratedCodeInfo_Annotation {
      return GeneratedCodeInfo_Annotation.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GeneratedCodeInfo_Annotation>,
    ): GeneratedCodeInfo_Annotation {
      const message = createBaseGeneratedCodeInfo_Annotation();
      message.path = object.path?.map((e) => e) || [];
      message.source_file = object.source_file ?? "";
      message.begin = object.begin ?? 0;
      message.end = object.end ?? 0;
      message.semantic =
        object.semantic ?? GeneratedCodeInfo_Annotation_Semantic.NONE;
      return message;
    },
  };

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
