// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: proto/sub2/message.proto

/* eslint-disable */

export const protobufPackage = "proto.sub2";

export interface IdMessage {
  uuid: string;
}

function createBaseIdMessage(): IdMessage {
  return { uuid: "" };
}

export const IdMessage: MessageFns<IdMessage> = {
  fromJSON(object: any): IdMessage {
    return { uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "" };
  },

  toJSON(message: IdMessage): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    return obj;
  },

  create(base?: DeepPartial<IdMessage>): IdMessage {
    return IdMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdMessage>): IdMessage {
    const message = createBaseIdMessage();
    message.uuid = object.uuid ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
