// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: proto/oneofenum/oneof_enum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.oneofenum";

export enum ExampleEnum {
  EXAMPLE_ENUM_UNSPECIFIED = "EXAMPLE_ENUM_UNSPECIFIED",
  EXAMPLE_ENUM_FIRST = "EXAMPLE_ENUM_FIRST",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function exampleEnumFromJSON(object: any): ExampleEnum {
  switch (object) {
    case 0:
    case "EXAMPLE_ENUM_UNSPECIFIED":
      return ExampleEnum.EXAMPLE_ENUM_UNSPECIFIED;
    case 1:
    case "EXAMPLE_ENUM_FIRST":
      return ExampleEnum.EXAMPLE_ENUM_FIRST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExampleEnum.UNRECOGNIZED;
  }
}

export function exampleEnumToNumber(object: ExampleEnum): number {
  switch (object) {
    case ExampleEnum.EXAMPLE_ENUM_UNSPECIFIED:
      return 0;
    case ExampleEnum.EXAMPLE_ENUM_FIRST:
      return 1;
    case ExampleEnum.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface OneofEnumMessage {
  exampleEnum?: ExampleEnum | undefined;
}

function createBaseOneofEnumMessage(): OneofEnumMessage {
  return { exampleEnum: undefined };
}

export const OneofEnumMessage: MessageFns<OneofEnumMessage> = {
  encode(
    message: OneofEnumMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.exampleEnum !== undefined) {
      writer.uint32(8).int32(exampleEnumToNumber(message.exampleEnum));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OneofEnumMessage {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneofEnumMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.exampleEnum = exampleEnumFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<OneofEnumMessage>): OneofEnumMessage {
    return OneofEnumMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OneofEnumMessage>): OneofEnumMessage {
    const message = createBaseOneofEnumMessage();
    message.exampleEnum = object.exampleEnum ?? undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
