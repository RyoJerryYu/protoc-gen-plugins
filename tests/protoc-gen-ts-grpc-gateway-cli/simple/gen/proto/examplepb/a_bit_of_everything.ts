// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: proto/examplepb/a_bit_of_everything.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../google/protobuf/duration";
import { Empty } from "../../google/protobuf/empty";
import { FieldMask } from "../../google/protobuf/field_mask";
import { Timestamp } from "../../google/protobuf/timestamp";
import { StringValue } from "../../google/protobuf/wrappers";
import { Status } from "../../google/rpc/status";
import { OneofEnumMessage } from "../oneofenum/oneof_enum";
import {
  MessagePathEnum_NestedPathEnum,
  messagePathEnum_NestedPathEnumFromJSON,
  messagePathEnum_NestedPathEnumToNumber,
  MessageWithNestedPathEnum,
  MessageWithPathEnum,
  PathEnum,
  pathEnumFromJSON,
  pathEnumToNumber,
} from "../pathenum/path_enum";
import { IdMessage } from "../sub2/message";

export const protobufPackage = "proto.examplepb";

/** NumericEnum is one or zero. */
export enum NumericEnum {
  /** ZERO - ZERO means 0 */
  ZERO = "ZERO",
  /** ONE - ONE means 1 */
  ONE = "ONE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function numericEnumFromJSON(object: any): NumericEnum {
  switch (object) {
    case 0:
    case "ZERO":
      return NumericEnum.ZERO;
    case 1:
    case "ONE":
      return NumericEnum.ONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NumericEnum.UNRECOGNIZED;
  }
}

export function numericEnumToNumber(object: NumericEnum): number {
  switch (object) {
    case NumericEnum.ZERO:
      return 0;
    case NumericEnum.ONE:
      return 1;
    case NumericEnum.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ErrorObject {
  code: number;
  message: string;
}

/** Intentionally complicated message type to cover many features of Protobuf. */
export interface ABitOfEverything {
  singleNested?: ABitOfEverything_Nested | undefined;
  uuid: string;
  nested: ABitOfEverything_Nested[];
  floatValue: number;
  doubleValue: number;
  int64Value: number;
  uint64Value: number;
  int32Value: number;
  fixed64Value: number;
  fixed32Value: number;
  boolValue: boolean;
  stringValue: string;
  bytesValue: Uint8Array;
  uint32Value: number;
  enumValue: NumericEnum;
  pathEnumValue: PathEnum;
  nestedPathEnumValue: MessagePathEnum_NestedPathEnum;
  sfixed32Value: number;
  sfixed64Value: number;
  sint32Value: number;
  sint64Value: number;
  repeatedStringValue: string[];
  oneofEmpty?: Empty | undefined;
  oneofString?: string | undefined;
  mapValue: { [key: string]: NumericEnum };
  mappedStringValue: { [key: string]: string };
  mappedNestedValue: { [key: string]: ABitOfEverything_Nested };
  timestampValue?: Date | undefined;
  /** repeated enum value. it is comma-separated in query */
  repeatedEnumValue: NumericEnum[];
  /** repeated numeric enum comment (This comment is overridden by the field annotation) */
  repeatedEnumAnnotation: NumericEnum[];
  /** numeric enum comment (This comment is overridden by the field annotation) */
  enumValueAnnotation: NumericEnum;
  /** repeated string comment (This comment is overridden by the field annotation) */
  repeatedStringAnnotation: string[];
  /** repeated nested object comment (This comment is overridden by the field annotation) */
  repeatedNestedAnnotation: ABitOfEverything_Nested[];
  /** nested object comments (This comment is overridden by the field annotation) */
  nestedAnnotation?: ABitOfEverything_Nested | undefined;
  int64OverrideType: number;
  /** mark a field as required in Open API definition */
  requiredStringViaFieldBehaviorAnnotation: string;
  /** mark a field as readonly in Open API definition */
  outputOnlyStringViaFieldBehaviorAnnotation: string;
  optionalStringValue?: string | undefined;
  /** Test openapiv2 generation of repeated fields */
  productId: string[];
  /** Test openapiv2 generation of required fields with annotation and jsonschema to reproduce */
  optionalStringField: string;
  requiredStringField1: string;
  requiredStringField2: string;
  /** Test openapiv2 handling of required json_name fields */
  requiredFieldBehaviorJsonName: string;
  requiredFieldSchemaJsonName: string;
  /** Trailing only */
  trailingOnly: string;
  /** Trailing only dot. */
  trailingOnlyDot: string;
  /** Leading both */
  trailingBoth: string;
  /**
   * Leading multiline
   *
   * This is an example of a multi-line comment.
   */
  trailingMultiline: string;
  /** Specify a custom format of repeated field items */
  uuids: string[];
}

/** Nested is nested type. */
export interface ABitOfEverything_Nested {
  /** name is nested field. */
  name: string;
  amount: number;
  /** DeepEnum comment. */
  ok: ABitOfEverything_Nested_DeepEnum;
}

/** DeepEnum is one or zero. */
export enum ABitOfEverything_Nested_DeepEnum {
  /** FALSE - FALSE is false. */
  FALSE = "FALSE",
  /** TRUE - TRUE is true. */
  TRUE = "TRUE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function aBitOfEverything_Nested_DeepEnumFromJSON(
  object: any,
): ABitOfEverything_Nested_DeepEnum {
  switch (object) {
    case 0:
    case "FALSE":
      return ABitOfEverything_Nested_DeepEnum.FALSE;
    case 1:
    case "TRUE":
      return ABitOfEverything_Nested_DeepEnum.TRUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ABitOfEverything_Nested_DeepEnum.UNRECOGNIZED;
  }
}

export function aBitOfEverything_Nested_DeepEnumToNumber(
  object: ABitOfEverything_Nested_DeepEnum,
): number {
  switch (object) {
    case ABitOfEverything_Nested_DeepEnum.FALSE:
      return 0;
    case ABitOfEverything_Nested_DeepEnum.TRUE:
      return 1;
    case ABitOfEverything_Nested_DeepEnum.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ABitOfEverything_MapValueEntry {
  key: string;
  value: NumericEnum;
}

export interface ABitOfEverything_MappedStringValueEntry {
  key: string;
  value: string;
}

export interface ABitOfEverything_MappedNestedValueEntry {
  key: string;
  value?: ABitOfEverything_Nested | undefined;
}

/** ABitOfEverythingRepeated is used to validate repeated path parameter functionality */
export interface ABitOfEverythingRepeated {
  /** repeated values. they are comma-separated in path */
  pathRepeatedFloatValue: number[];
  pathRepeatedDoubleValue: number[];
  pathRepeatedInt64Value: number[];
  pathRepeatedUint64Value: number[];
  pathRepeatedInt32Value: number[];
  pathRepeatedFixed64Value: number[];
  pathRepeatedFixed32Value: number[];
  pathRepeatedBoolValue: boolean[];
  pathRepeatedStringValue: string[];
  pathRepeatedBytesValue: Uint8Array[];
  pathRepeatedUint32Value: number[];
  pathRepeatedEnumValue: NumericEnum[];
  pathRepeatedSfixed32Value: number[];
  pathRepeatedSfixed64Value: number[];
  pathRepeatedSint32Value: number[];
  pathRepeatedSint64Value: number[];
}

export interface CheckStatusResponse {
  status?: Status | undefined;
}

export interface Body {
  name: string;
}

export interface MessageWithBody {
  id: string;
  data?: Body | undefined;
}

/** UpdateV2Request request for update includes the message and the update mask */
export interface UpdateV2Request {
  abe?: ABitOfEverything | undefined;
  /** The paths to update. */
  updateMask?: string[] | undefined;
}

/**
 * An example resource type from AIP-123 used to test the behavior described in
 * the CreateBookRequest message.
 *
 * See: https://google.aip.dev/123
 */
export interface Book {
  /**
   * The resource name of the book.
   *
   * Format: `publishers/{publisher}/books/{book}`
   *
   * Example: `publishers/1257894000000000000/books/my-book`
   */
  name: string;
  /** Output only. The book's ID. */
  id: string;
  /** Output only. Creation time of the book. */
  createTime?: Date | undefined;
}

/**
 * A standard Create message from AIP-133 with a user-specified ID.
 * The user-specified ID (the `book_id` field in this example) must become a
 * query parameter in the OpenAPI spec.
 *
 * See: https://google.aip.dev/133#user-specified-ids
 */
export interface CreateBookRequest {
  /**
   * The publisher in which to create the book.
   *
   * Format: `publishers/{publisher}`
   *
   * Example: `publishers/1257894000000000000`
   */
  parent: string;
  /** The book to create. */
  book?: Book | undefined;
  /**
   * The ID to use for the book.
   *
   * This must start with an alphanumeric character.
   */
  bookId: string;
}

/**
 * A standard Update message from AIP-134
 *
 * See: https://google.aip.dev/134#request-message
 */
export interface UpdateBookRequest {
  /**
   * The book to update.
   *
   * The book's `name` field is used to identify the book to be updated.
   * Format: publishers/{publisher}/books/{book}
   */
  book?: Book | undefined;
  /** The list of fields to be updated. */
  updateMask?: string[] | undefined;
  /**
   * If set to true, and the book is not found, a new book will be created.
   * In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

/**
 * Required message type -> OpenAPI
 * https://github.com/grpc-ecosystem/grpc-gateway/issues/2837
 */
export interface RequiredMessageTypeRequest {
  id: string;
  foo?: Foo | undefined;
}

export interface Foo {
  bar?: Bar | undefined;
}

export interface Bar {
  id: string;
}

function createBaseErrorObject(): ErrorObject {
  return { code: 0, message: "" };
}

export const ErrorObject: MessageFns<ErrorObject> = {
  encode(
    message: ErrorObject,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorObject {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ErrorObject>): ErrorObject {
    return ErrorObject.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorObject>): ErrorObject {
    const message = createBaseErrorObject();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseABitOfEverything(): ABitOfEverything {
  return {
    singleNested: undefined,
    uuid: "",
    nested: [],
    floatValue: 0,
    doubleValue: 0,
    int64Value: 0,
    uint64Value: 0,
    int32Value: 0,
    fixed64Value: 0,
    fixed32Value: 0,
    boolValue: false,
    stringValue: "",
    bytesValue: new Uint8Array(0),
    uint32Value: 0,
    enumValue: NumericEnum.ZERO,
    pathEnumValue: PathEnum.ABC,
    nestedPathEnumValue: MessagePathEnum_NestedPathEnum.GHI,
    sfixed32Value: 0,
    sfixed64Value: 0,
    sint32Value: 0,
    sint64Value: 0,
    repeatedStringValue: [],
    oneofEmpty: undefined,
    oneofString: undefined,
    mapValue: {},
    mappedStringValue: {},
    mappedNestedValue: {},
    timestampValue: undefined,
    repeatedEnumValue: [],
    repeatedEnumAnnotation: [],
    enumValueAnnotation: NumericEnum.ZERO,
    repeatedStringAnnotation: [],
    repeatedNestedAnnotation: [],
    nestedAnnotation: undefined,
    int64OverrideType: 0,
    requiredStringViaFieldBehaviorAnnotation: "",
    outputOnlyStringViaFieldBehaviorAnnotation: "",
    optionalStringValue: undefined,
    productId: [],
    optionalStringField: "",
    requiredStringField1: "",
    requiredStringField2: "",
    requiredFieldBehaviorJsonName: "",
    requiredFieldSchemaJsonName: "",
    trailingOnly: "",
    trailingOnlyDot: "",
    trailingBoth: "",
    trailingMultiline: "",
    uuids: [],
  };
}

export const ABitOfEverything: MessageFns<ABitOfEverything> = {
  encode(
    message: ABitOfEverything,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.singleNested !== undefined) {
      ABitOfEverything_Nested.encode(
        message.singleNested,
        writer.uint32(202).fork(),
      ).join();
    }
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    for (const v of message.nested) {
      ABitOfEverything_Nested.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.floatValue !== 0) {
      writer.uint32(29).float(message.floatValue);
    }
    if (message.doubleValue !== 0) {
      writer.uint32(33).double(message.doubleValue);
    }
    if (message.int64Value !== 0) {
      writer.uint32(40).int64(message.int64Value);
    }
    if (message.uint64Value !== 0) {
      writer.uint32(48).uint64(message.uint64Value);
    }
    if (message.int32Value !== 0) {
      writer.uint32(56).int32(message.int32Value);
    }
    if (message.fixed64Value !== 0) {
      writer.uint32(65).fixed64(message.fixed64Value);
    }
    if (message.fixed32Value !== 0) {
      writer.uint32(77).fixed32(message.fixed32Value);
    }
    if (message.boolValue !== false) {
      writer.uint32(80).bool(message.boolValue);
    }
    if (message.stringValue !== "") {
      writer.uint32(90).string(message.stringValue);
    }
    if (message.bytesValue.length !== 0) {
      writer.uint32(234).bytes(message.bytesValue);
    }
    if (message.uint32Value !== 0) {
      writer.uint32(104).uint32(message.uint32Value);
    }
    if (message.enumValue !== NumericEnum.ZERO) {
      writer.uint32(112).int32(numericEnumToNumber(message.enumValue));
    }
    if (message.pathEnumValue !== PathEnum.ABC) {
      writer.uint32(240).int32(pathEnumToNumber(message.pathEnumValue));
    }
    if (message.nestedPathEnumValue !== MessagePathEnum_NestedPathEnum.GHI) {
      writer
        .uint32(248)
        .int32(
          messagePathEnum_NestedPathEnumToNumber(message.nestedPathEnumValue),
        );
    }
    if (message.sfixed32Value !== 0) {
      writer.uint32(125).sfixed32(message.sfixed32Value);
    }
    if (message.sfixed64Value !== 0) {
      writer.uint32(129).sfixed64(message.sfixed64Value);
    }
    if (message.sint32Value !== 0) {
      writer.uint32(136).sint32(message.sint32Value);
    }
    if (message.sint64Value !== 0) {
      writer.uint32(144).sint64(message.sint64Value);
    }
    for (const v of message.repeatedStringValue) {
      writer.uint32(154).string(v!);
    }
    if (message.oneofEmpty !== undefined) {
      Empty.encode(message.oneofEmpty, writer.uint32(162).fork()).join();
    }
    if (message.oneofString !== undefined) {
      writer.uint32(170).string(message.oneofString);
    }
    Object.entries(message.mapValue).forEach(([key, value]) => {
      ABitOfEverything_MapValueEntry.encode(
        { key: key as any, value },
        writer.uint32(178).fork(),
      ).join();
    });
    Object.entries(message.mappedStringValue).forEach(([key, value]) => {
      ABitOfEverything_MappedStringValueEntry.encode(
        { key: key as any, value },
        writer.uint32(186).fork(),
      ).join();
    });
    Object.entries(message.mappedNestedValue).forEach(([key, value]) => {
      ABitOfEverything_MappedNestedValueEntry.encode(
        { key: key as any, value },
        writer.uint32(194).fork(),
      ).join();
    });
    if (message.timestampValue !== undefined) {
      Timestamp.encode(
        toTimestamp(message.timestampValue),
        writer.uint32(218).fork(),
      ).join();
    }
    writer.uint32(226).fork();
    for (const v of message.repeatedEnumValue) {
      writer.int32(numericEnumToNumber(v));
    }
    writer.join();
    writer.uint32(258).fork();
    for (const v of message.repeatedEnumAnnotation) {
      writer.int32(numericEnumToNumber(v));
    }
    writer.join();
    if (message.enumValueAnnotation !== NumericEnum.ZERO) {
      writer
        .uint32(264)
        .int32(numericEnumToNumber(message.enumValueAnnotation));
    }
    for (const v of message.repeatedStringAnnotation) {
      writer.uint32(274).string(v!);
    }
    for (const v of message.repeatedNestedAnnotation) {
      ABitOfEverything_Nested.encode(v!, writer.uint32(282).fork()).join();
    }
    if (message.nestedAnnotation !== undefined) {
      ABitOfEverything_Nested.encode(
        message.nestedAnnotation,
        writer.uint32(290).fork(),
      ).join();
    }
    if (message.int64OverrideType !== 0) {
      writer.uint32(296).int64(message.int64OverrideType);
    }
    if (message.requiredStringViaFieldBehaviorAnnotation !== "") {
      writer
        .uint32(306)
        .string(message.requiredStringViaFieldBehaviorAnnotation);
    }
    if (message.outputOnlyStringViaFieldBehaviorAnnotation !== "") {
      writer
        .uint32(314)
        .string(message.outputOnlyStringViaFieldBehaviorAnnotation);
    }
    if (message.optionalStringValue !== undefined) {
      writer.uint32(322).string(message.optionalStringValue);
    }
    for (const v of message.productId) {
      writer.uint32(330).string(v!);
    }
    if (message.optionalStringField !== "") {
      writer.uint32(338).string(message.optionalStringField);
    }
    if (message.requiredStringField1 !== "") {
      writer.uint32(346).string(message.requiredStringField1);
    }
    if (message.requiredStringField2 !== "") {
      writer.uint32(354).string(message.requiredStringField2);
    }
    if (message.requiredFieldBehaviorJsonName !== "") {
      writer.uint32(362).string(message.requiredFieldBehaviorJsonName);
    }
    if (message.requiredFieldSchemaJsonName !== "") {
      writer.uint32(370).string(message.requiredFieldSchemaJsonName);
    }
    if (message.trailingOnly !== "") {
      writer.uint32(378).string(message.trailingOnly);
    }
    if (message.trailingOnlyDot !== "") {
      writer.uint32(386).string(message.trailingOnlyDot);
    }
    if (message.trailingBoth !== "") {
      writer.uint32(394).string(message.trailingBoth);
    }
    if (message.trailingMultiline !== "") {
      writer.uint32(402).string(message.trailingMultiline);
    }
    for (const v of message.uuids) {
      writer.uint32(410).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.singleNested = ABitOfEverything_Nested.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nested.push(
            ABitOfEverything_Nested.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.floatValue = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.int64Value = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.uint64Value = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.int32Value = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.fixed64Value = longToNumber(reader.fixed64());
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.fixed32Value = reader.fixed32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.bytesValue = reader.bytes();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.uint32Value = reader.uint32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.enumValue = numericEnumFromJSON(reader.int32());
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.pathEnumValue = pathEnumFromJSON(reader.int32());
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.nestedPathEnumValue = messagePathEnum_NestedPathEnumFromJSON(
            reader.int32(),
          );
          continue;
        }
        case 15: {
          if (tag !== 125) {
            break;
          }

          message.sfixed32Value = reader.sfixed32();
          continue;
        }
        case 16: {
          if (tag !== 129) {
            break;
          }

          message.sfixed64Value = longToNumber(reader.sfixed64());
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.sint32Value = reader.sint32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.sint64Value = longToNumber(reader.sint64());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.repeatedStringValue.push(reader.string());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.oneofEmpty = Empty.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.oneofString = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          const entry22 = ABitOfEverything_MapValueEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry22.value !== undefined) {
            message.mapValue[entry22.key] = entry22.value;
          }
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          const entry23 = ABitOfEverything_MappedStringValueEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry23.value !== undefined) {
            message.mappedStringValue[entry23.key] = entry23.value;
          }
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          const entry24 = ABitOfEverything_MappedNestedValueEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry24.value !== undefined) {
            message.mappedNestedValue[entry24.key] = entry24.value;
          }
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.timestampValue = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 28: {
          if (tag === 224) {
            message.repeatedEnumValue.push(numericEnumFromJSON(reader.int32()));

            continue;
          }

          if (tag === 226) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.repeatedEnumValue.push(
                numericEnumFromJSON(reader.int32()),
              );
            }

            continue;
          }

          break;
        }
        case 32: {
          if (tag === 256) {
            message.repeatedEnumAnnotation.push(
              numericEnumFromJSON(reader.int32()),
            );

            continue;
          }

          if (tag === 258) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.repeatedEnumAnnotation.push(
                numericEnumFromJSON(reader.int32()),
              );
            }

            continue;
          }

          break;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.enumValueAnnotation = numericEnumFromJSON(reader.int32());
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.repeatedStringAnnotation.push(reader.string());
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.repeatedNestedAnnotation.push(
            ABitOfEverything_Nested.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.nestedAnnotation = ABitOfEverything_Nested.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.int64OverrideType = longToNumber(reader.int64());
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.requiredStringViaFieldBehaviorAnnotation = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.outputOnlyStringViaFieldBehaviorAnnotation = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.optionalStringValue = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.productId.push(reader.string());
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.optionalStringField = reader.string();
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.requiredStringField1 = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.requiredStringField2 = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.requiredFieldBehaviorJsonName = reader.string();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.requiredFieldSchemaJsonName = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.trailingOnly = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.trailingOnlyDot = reader.string();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.trailingBoth = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.trailingMultiline = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.uuids.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ABitOfEverything>): ABitOfEverything {
    return ABitOfEverything.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything>): ABitOfEverything {
    const message = createBaseABitOfEverything();
    message.singleNested =
      object.singleNested !== undefined && object.singleNested !== null
        ? ABitOfEverything_Nested.fromPartial(object.singleNested)
        : undefined;
    message.uuid = object.uuid ?? "";
    message.nested =
      object.nested?.map((e) => ABitOfEverything_Nested.fromPartial(e)) || [];
    message.floatValue = object.floatValue ?? 0;
    message.doubleValue = object.doubleValue ?? 0;
    message.int64Value = object.int64Value ?? 0;
    message.uint64Value = object.uint64Value ?? 0;
    message.int32Value = object.int32Value ?? 0;
    message.fixed64Value = object.fixed64Value ?? 0;
    message.fixed32Value = object.fixed32Value ?? 0;
    message.boolValue = object.boolValue ?? false;
    message.stringValue = object.stringValue ?? "";
    message.bytesValue = object.bytesValue ?? new Uint8Array(0);
    message.uint32Value = object.uint32Value ?? 0;
    message.enumValue = object.enumValue ?? NumericEnum.ZERO;
    message.pathEnumValue = object.pathEnumValue ?? PathEnum.ABC;
    message.nestedPathEnumValue =
      object.nestedPathEnumValue ?? MessagePathEnum_NestedPathEnum.GHI;
    message.sfixed32Value = object.sfixed32Value ?? 0;
    message.sfixed64Value = object.sfixed64Value ?? 0;
    message.sint32Value = object.sint32Value ?? 0;
    message.sint64Value = object.sint64Value ?? 0;
    message.repeatedStringValue =
      object.repeatedStringValue?.map((e) => e) || [];
    message.oneofEmpty =
      object.oneofEmpty !== undefined && object.oneofEmpty !== null
        ? Empty.fromPartial(object.oneofEmpty)
        : undefined;
    message.oneofString = object.oneofString ?? undefined;
    message.mapValue = Object.entries(object.mapValue ?? {}).reduce<{
      [key: string]: NumericEnum;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value as NumericEnum;
      }
      return acc;
    }, {});
    message.mappedStringValue = Object.entries(
      object.mappedStringValue ?? {},
    ).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.mappedNestedValue = Object.entries(
      object.mappedNestedValue ?? {},
    ).reduce<{ [key: string]: ABitOfEverything_Nested }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ABitOfEverything_Nested.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.timestampValue = object.timestampValue ?? undefined;
    message.repeatedEnumValue = object.repeatedEnumValue?.map((e) => e) || [];
    message.repeatedEnumAnnotation =
      object.repeatedEnumAnnotation?.map((e) => e) || [];
    message.enumValueAnnotation =
      object.enumValueAnnotation ?? NumericEnum.ZERO;
    message.repeatedStringAnnotation =
      object.repeatedStringAnnotation?.map((e) => e) || [];
    message.repeatedNestedAnnotation =
      object.repeatedNestedAnnotation?.map((e) =>
        ABitOfEverything_Nested.fromPartial(e),
      ) || [];
    message.nestedAnnotation =
      object.nestedAnnotation !== undefined && object.nestedAnnotation !== null
        ? ABitOfEverything_Nested.fromPartial(object.nestedAnnotation)
        : undefined;
    message.int64OverrideType = object.int64OverrideType ?? 0;
    message.requiredStringViaFieldBehaviorAnnotation =
      object.requiredStringViaFieldBehaviorAnnotation ?? "";
    message.outputOnlyStringViaFieldBehaviorAnnotation =
      object.outputOnlyStringViaFieldBehaviorAnnotation ?? "";
    message.optionalStringValue = object.optionalStringValue ?? undefined;
    message.productId = object.productId?.map((e) => e) || [];
    message.optionalStringField = object.optionalStringField ?? "";
    message.requiredStringField1 = object.requiredStringField1 ?? "";
    message.requiredStringField2 = object.requiredStringField2 ?? "";
    message.requiredFieldBehaviorJsonName =
      object.requiredFieldBehaviorJsonName ?? "";
    message.requiredFieldSchemaJsonName =
      object.requiredFieldSchemaJsonName ?? "";
    message.trailingOnly = object.trailingOnly ?? "";
    message.trailingOnlyDot = object.trailingOnlyDot ?? "";
    message.trailingBoth = object.trailingBoth ?? "";
    message.trailingMultiline = object.trailingMultiline ?? "";
    message.uuids = object.uuids?.map((e) => e) || [];
    return message;
  },
};

function createBaseABitOfEverything_Nested(): ABitOfEverything_Nested {
  return { name: "", amount: 0, ok: ABitOfEverything_Nested_DeepEnum.FALSE };
}

export const ABitOfEverything_Nested: MessageFns<ABitOfEverything_Nested> = {
  encode(
    message: ABitOfEverything_Nested,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.amount !== 0) {
      writer.uint32(16).uint32(message.amount);
    }
    if (message.ok !== ABitOfEverything_Nested_DeepEnum.FALSE) {
      writer
        .uint32(24)
        .int32(aBitOfEverything_Nested_DeepEnumToNumber(message.ok));
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ABitOfEverything_Nested {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_Nested();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ok = aBitOfEverything_Nested_DeepEnumFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ABitOfEverything_Nested>): ABitOfEverything_Nested {
    return ABitOfEverything_Nested.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ABitOfEverything_Nested>,
  ): ABitOfEverything_Nested {
    const message = createBaseABitOfEverything_Nested();
    message.name = object.name ?? "";
    message.amount = object.amount ?? 0;
    message.ok = object.ok ?? ABitOfEverything_Nested_DeepEnum.FALSE;
    return message;
  },
};

function createBaseABitOfEverything_MapValueEntry(): ABitOfEverything_MapValueEntry {
  return { key: "", value: NumericEnum.ZERO };
}

export const ABitOfEverything_MapValueEntry: MessageFns<ABitOfEverything_MapValueEntry> =
  {
    encode(
      message: ABitOfEverything_MapValueEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== NumericEnum.ZERO) {
        writer.uint32(16).int32(numericEnumToNumber(message.value));
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ABitOfEverything_MapValueEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseABitOfEverything_MapValueEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.value = numericEnumFromJSON(reader.int32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<ABitOfEverything_MapValueEntry>,
    ): ABitOfEverything_MapValueEntry {
      return ABitOfEverything_MapValueEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ABitOfEverything_MapValueEntry>,
    ): ABitOfEverything_MapValueEntry {
      const message = createBaseABitOfEverything_MapValueEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? NumericEnum.ZERO;
      return message;
    },
  };

function createBaseABitOfEverything_MappedStringValueEntry(): ABitOfEverything_MappedStringValueEntry {
  return { key: "", value: "" };
}

export const ABitOfEverything_MappedStringValueEntry: MessageFns<ABitOfEverything_MappedStringValueEntry> =
  {
    encode(
      message: ABitOfEverything_MappedStringValueEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ABitOfEverything_MappedStringValueEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseABitOfEverything_MappedStringValueEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<ABitOfEverything_MappedStringValueEntry>,
    ): ABitOfEverything_MappedStringValueEntry {
      return ABitOfEverything_MappedStringValueEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ABitOfEverything_MappedStringValueEntry>,
    ): ABitOfEverything_MappedStringValueEntry {
      const message = createBaseABitOfEverything_MappedStringValueEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    },
  };

function createBaseABitOfEverything_MappedNestedValueEntry(): ABitOfEverything_MappedNestedValueEntry {
  return { key: "", value: undefined };
}

export const ABitOfEverything_MappedNestedValueEntry: MessageFns<ABitOfEverything_MappedNestedValueEntry> =
  {
    encode(
      message: ABitOfEverything_MappedNestedValueEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== undefined) {
        ABitOfEverything_Nested.encode(
          message.value,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ABitOfEverything_MappedNestedValueEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseABitOfEverything_MappedNestedValueEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = ABitOfEverything_Nested.decode(
              reader,
              reader.uint32(),
            );
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<ABitOfEverything_MappedNestedValueEntry>,
    ): ABitOfEverything_MappedNestedValueEntry {
      return ABitOfEverything_MappedNestedValueEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ABitOfEverything_MappedNestedValueEntry>,
    ): ABitOfEverything_MappedNestedValueEntry {
      const message = createBaseABitOfEverything_MappedNestedValueEntry();
      message.key = object.key ?? "";
      message.value =
        object.value !== undefined && object.value !== null
          ? ABitOfEverything_Nested.fromPartial(object.value)
          : undefined;
      return message;
    },
  };

function createBaseABitOfEverythingRepeated(): ABitOfEverythingRepeated {
  return {
    pathRepeatedFloatValue: [],
    pathRepeatedDoubleValue: [],
    pathRepeatedInt64Value: [],
    pathRepeatedUint64Value: [],
    pathRepeatedInt32Value: [],
    pathRepeatedFixed64Value: [],
    pathRepeatedFixed32Value: [],
    pathRepeatedBoolValue: [],
    pathRepeatedStringValue: [],
    pathRepeatedBytesValue: [],
    pathRepeatedUint32Value: [],
    pathRepeatedEnumValue: [],
    pathRepeatedSfixed32Value: [],
    pathRepeatedSfixed64Value: [],
    pathRepeatedSint32Value: [],
    pathRepeatedSint64Value: [],
  };
}

export const ABitOfEverythingRepeated: MessageFns<ABitOfEverythingRepeated> = {
  encode(
    message: ABitOfEverythingRepeated,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.pathRepeatedFloatValue) {
      writer.float(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.pathRepeatedDoubleValue) {
      writer.double(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.pathRepeatedInt64Value) {
      writer.int64(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.pathRepeatedUint64Value) {
      writer.uint64(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.pathRepeatedInt32Value) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.pathRepeatedFixed64Value) {
      writer.fixed64(v);
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.pathRepeatedFixed32Value) {
      writer.fixed32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.pathRepeatedBoolValue) {
      writer.bool(v);
    }
    writer.join();
    for (const v of message.pathRepeatedStringValue) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.pathRepeatedBytesValue) {
      writer.uint32(82).bytes(v!);
    }
    writer.uint32(90).fork();
    for (const v of message.pathRepeatedUint32Value) {
      writer.uint32(v);
    }
    writer.join();
    writer.uint32(98).fork();
    for (const v of message.pathRepeatedEnumValue) {
      writer.int32(numericEnumToNumber(v));
    }
    writer.join();
    writer.uint32(106).fork();
    for (const v of message.pathRepeatedSfixed32Value) {
      writer.sfixed32(v);
    }
    writer.join();
    writer.uint32(114).fork();
    for (const v of message.pathRepeatedSfixed64Value) {
      writer.sfixed64(v);
    }
    writer.join();
    writer.uint32(122).fork();
    for (const v of message.pathRepeatedSint32Value) {
      writer.sint32(v);
    }
    writer.join();
    writer.uint32(130).fork();
    for (const v of message.pathRepeatedSint64Value) {
      writer.sint64(v);
    }
    writer.join();
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ABitOfEverythingRepeated {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverythingRepeated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 13) {
            message.pathRepeatedFloatValue.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedFloatValue.push(reader.float());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 17) {
            message.pathRepeatedDoubleValue.push(reader.double());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedDoubleValue.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.pathRepeatedInt64Value.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedInt64Value.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.pathRepeatedUint64Value.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedUint64Value.push(
                longToNumber(reader.uint64()),
              );
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.pathRepeatedInt32Value.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedInt32Value.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 49) {
            message.pathRepeatedFixed64Value.push(
              longToNumber(reader.fixed64()),
            );

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedFixed64Value.push(
                longToNumber(reader.fixed64()),
              );
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag === 61) {
            message.pathRepeatedFixed32Value.push(reader.fixed32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedFixed32Value.push(reader.fixed32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.pathRepeatedBoolValue.push(reader.bool());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedBoolValue.push(reader.bool());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.pathRepeatedStringValue.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.pathRepeatedBytesValue.push(reader.bytes());
          continue;
        }
        case 11: {
          if (tag === 88) {
            message.pathRepeatedUint32Value.push(reader.uint32());

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedUint32Value.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 12: {
          if (tag === 96) {
            message.pathRepeatedEnumValue.push(
              numericEnumFromJSON(reader.int32()),
            );

            continue;
          }

          if (tag === 98) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedEnumValue.push(
                numericEnumFromJSON(reader.int32()),
              );
            }

            continue;
          }

          break;
        }
        case 13: {
          if (tag === 109) {
            message.pathRepeatedSfixed32Value.push(reader.sfixed32());

            continue;
          }

          if (tag === 106) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedSfixed32Value.push(reader.sfixed32());
            }

            continue;
          }

          break;
        }
        case 14: {
          if (tag === 113) {
            message.pathRepeatedSfixed64Value.push(
              longToNumber(reader.sfixed64()),
            );

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedSfixed64Value.push(
                longToNumber(reader.sfixed64()),
              );
            }

            continue;
          }

          break;
        }
        case 15: {
          if (tag === 120) {
            message.pathRepeatedSint32Value.push(reader.sint32());

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedSint32Value.push(reader.sint32());
            }

            continue;
          }

          break;
        }
        case 16: {
          if (tag === 128) {
            message.pathRepeatedSint64Value.push(longToNumber(reader.sint64()));

            continue;
          }

          if (tag === 130) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedSint64Value.push(
                longToNumber(reader.sint64()),
              );
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ABitOfEverythingRepeated>,
  ): ABitOfEverythingRepeated {
    return ABitOfEverythingRepeated.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ABitOfEverythingRepeated>,
  ): ABitOfEverythingRepeated {
    const message = createBaseABitOfEverythingRepeated();
    message.pathRepeatedFloatValue =
      object.pathRepeatedFloatValue?.map((e) => e) || [];
    message.pathRepeatedDoubleValue =
      object.pathRepeatedDoubleValue?.map((e) => e) || [];
    message.pathRepeatedInt64Value =
      object.pathRepeatedInt64Value?.map((e) => e) || [];
    message.pathRepeatedUint64Value =
      object.pathRepeatedUint64Value?.map((e) => e) || [];
    message.pathRepeatedInt32Value =
      object.pathRepeatedInt32Value?.map((e) => e) || [];
    message.pathRepeatedFixed64Value =
      object.pathRepeatedFixed64Value?.map((e) => e) || [];
    message.pathRepeatedFixed32Value =
      object.pathRepeatedFixed32Value?.map((e) => e) || [];
    message.pathRepeatedBoolValue =
      object.pathRepeatedBoolValue?.map((e) => e) || [];
    message.pathRepeatedStringValue =
      object.pathRepeatedStringValue?.map((e) => e) || [];
    message.pathRepeatedBytesValue =
      object.pathRepeatedBytesValue?.map((e) => e) || [];
    message.pathRepeatedUint32Value =
      object.pathRepeatedUint32Value?.map((e) => e) || [];
    message.pathRepeatedEnumValue =
      object.pathRepeatedEnumValue?.map((e) => e) || [];
    message.pathRepeatedSfixed32Value =
      object.pathRepeatedSfixed32Value?.map((e) => e) || [];
    message.pathRepeatedSfixed64Value =
      object.pathRepeatedSfixed64Value?.map((e) => e) || [];
    message.pathRepeatedSint32Value =
      object.pathRepeatedSint32Value?.map((e) => e) || [];
    message.pathRepeatedSint64Value =
      object.pathRepeatedSint64Value?.map((e) => e) || [];
    return message;
  },
};

function createBaseCheckStatusResponse(): CheckStatusResponse {
  return { status: undefined };
}

export const CheckStatusResponse: MessageFns<CheckStatusResponse> = {
  encode(
    message: CheckStatusResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CheckStatusResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CheckStatusResponse>): CheckStatusResponse {
    return CheckStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckStatusResponse>): CheckStatusResponse {
    const message = createBaseCheckStatusResponse();
    message.status =
      object.status !== undefined && object.status !== null
        ? Status.fromPartial(object.status)
        : undefined;
    return message;
  },
};

function createBaseBody(): Body {
  return { name: "" };
}

export const Body: MessageFns<Body> = {
  encode(
    message: Body,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Body {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Body>): Body {
    return Body.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Body>): Body {
    const message = createBaseBody();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseMessageWithBody(): MessageWithBody {
  return { id: "", data: undefined };
}

export const MessageWithBody: MessageFns<MessageWithBody> = {
  encode(
    message: MessageWithBody,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      Body.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageWithBody {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageWithBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = Body.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MessageWithBody>): MessageWithBody {
    return MessageWithBody.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageWithBody>): MessageWithBody {
    const message = createBaseMessageWithBody();
    message.id = object.id ?? "";
    message.data =
      object.data !== undefined && object.data !== null
        ? Body.fromPartial(object.data)
        : undefined;
    return message;
  },
};

function createBaseUpdateV2Request(): UpdateV2Request {
  return { abe: undefined, updateMask: undefined };
}

export const UpdateV2Request: MessageFns<UpdateV2Request> = {
  encode(
    message: UpdateV2Request,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.abe !== undefined) {
      ABitOfEverything.encode(message.abe, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(
        FieldMask.wrap(message.updateMask),
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateV2Request {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateV2Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.abe = ABitOfEverything.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(
            FieldMask.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateV2Request>): UpdateV2Request {
    return UpdateV2Request.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateV2Request>): UpdateV2Request {
    const message = createBaseUpdateV2Request();
    message.abe =
      object.abe !== undefined && object.abe !== null
        ? ABitOfEverything.fromPartial(object.abe)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseBook(): Book {
  return { name: "", id: "", createTime: undefined };
}

export const Book: MessageFns<Book> = {
  encode(
    message: Book,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createTime),
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Book {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Book>): Book {
    return Book.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Book>): Book {
    const message = createBaseBook();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseCreateBookRequest(): CreateBookRequest {
  return { parent: "", book: undefined, bookId: "" };
}

export const CreateBookRequest: MessageFns<CreateBookRequest> = {
  encode(
    message: CreateBookRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.book !== undefined) {
      Book.encode(message.book, writer.uint32(18).fork()).join();
    }
    if (message.bookId !== "") {
      writer.uint32(26).string(message.bookId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBookRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.book = Book.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bookId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateBookRequest>): CreateBookRequest {
    return CreateBookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBookRequest>): CreateBookRequest {
    const message = createBaseCreateBookRequest();
    message.parent = object.parent ?? "";
    message.book =
      object.book !== undefined && object.book !== null
        ? Book.fromPartial(object.book)
        : undefined;
    message.bookId = object.bookId ?? "";
    return message;
  },
};

function createBaseUpdateBookRequest(): UpdateBookRequest {
  return { book: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateBookRequest: MessageFns<UpdateBookRequest> = {
  encode(
    message: UpdateBookRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.book !== undefined) {
      Book.encode(message.book, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(
        FieldMask.wrap(message.updateMask),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBookRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.book = Book.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(
            FieldMask.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateBookRequest>): UpdateBookRequest {
    return UpdateBookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBookRequest>): UpdateBookRequest {
    const message = createBaseUpdateBookRequest();
    message.book =
      object.book !== undefined && object.book !== null
        ? Book.fromPartial(object.book)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseRequiredMessageTypeRequest(): RequiredMessageTypeRequest {
  return { id: "", foo: undefined };
}

export const RequiredMessageTypeRequest: MessageFns<RequiredMessageTypeRequest> =
  {
    encode(
      message: RequiredMessageTypeRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.id !== "") {
        writer.uint32(10).string(message.id);
      }
      if (message.foo !== undefined) {
        Foo.encode(message.foo, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): RequiredMessageTypeRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseRequiredMessageTypeRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.id = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.foo = Foo.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<RequiredMessageTypeRequest>,
    ): RequiredMessageTypeRequest {
      return RequiredMessageTypeRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<RequiredMessageTypeRequest>,
    ): RequiredMessageTypeRequest {
      const message = createBaseRequiredMessageTypeRequest();
      message.id = object.id ?? "";
      message.foo =
        object.foo !== undefined && object.foo !== null
          ? Foo.fromPartial(object.foo)
          : undefined;
      return message;
    },
  };

function createBaseFoo(): Foo {
  return { bar: undefined };
}

export const Foo: MessageFns<Foo> = {
  encode(
    message: Foo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.bar !== undefined) {
      Bar.encode(message.bar, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Foo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFoo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bar = Bar.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Foo>): Foo {
    return Foo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Foo>): Foo {
    const message = createBaseFoo();
    message.bar =
      object.bar !== undefined && object.bar !== null
        ? Bar.fromPartial(object.bar)
        : undefined;
    return message;
  },
};

function createBaseBar(): Bar {
  return { id: "" };
}

export const Bar: MessageFns<Bar> = {
  encode(
    message: Bar,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Bar {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Bar>): Bar {
    return Bar.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Bar>): Bar {
    const message = createBaseBar();
    message.id = object.id ?? "";
    return message;
  },
};

/**
 * ABitOfEverything service is used to validate that APIs with complicated
 * proto messages and URL templates are still processed correctly.
 */
export type ABitOfEverythingServiceDefinition =
  typeof ABitOfEverythingServiceDefinition;
export const ABitOfEverythingServiceDefinition = {
  name: "ABitOfEverythingService",
  fullName: "proto.examplepb.ABitOfEverythingService",
  methods: {
    createBody: {
      name: "CreateBody",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              36, 58, 1, 42, 34, 31, 47, 118, 49, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118,
              101, 114, 121, 116, 104, 105, 110, 103,
            ]),
          ],
        },
      },
    },
    lookup: {
      name: "Lookup",
      requestType: IdMessage,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              40, 18, 38, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 123, 117, 117, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    custom: {
      name: "Custom",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              47, 34, 45, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 123, 117, 117, 105, 100, 125, 58, 99,
              117, 115, 116, 111, 109,
            ]),
          ],
        },
      },
    },
    doubleColon: {
      name: "DoubleColon",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              54, 34, 52, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 123, 117, 117, 105, 100, 125, 58, 99,
              117, 115, 116, 111, 109, 58, 99, 117, 115, 116, 111, 109,
            ]),
          ],
        },
      },
    },
    update: {
      name: "Update",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              43, 58, 1, 42, 26, 38, 47, 118, 49, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118,
              101, 114, 121, 116, 104, 105, 110, 103, 47, 123, 117, 117, 105,
              100, 125,
            ]),
          ],
        },
      },
    },
    updateV2: {
      name: "UpdateV2",
      requestType: UpdateV2Request,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              150, 1, 58, 3, 97, 98, 101, 90, 49, 58, 3, 97, 98, 101, 50, 42,
              47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47, 97, 95, 98,
              105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121, 116, 104,
              105, 110, 103, 47, 123, 97, 98, 101, 46, 117, 117, 105, 100, 125,
              90, 48, 58, 1, 42, 50, 43, 47, 118, 50, 97, 47, 101, 120, 97, 109,
              112, 108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101,
              118, 101, 114, 121, 116, 104, 105, 110, 103, 47, 123, 97, 98, 101,
              46, 117, 117, 105, 100, 125, 26, 42, 47, 118, 50, 47, 101, 120,
              97, 109, 112, 108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102,
              95, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 47, 123, 97,
              98, 101, 46, 117, 117, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    delete: {
      name: "Delete",
      requestType: IdMessage,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              65, 98, 41, 10, 14, 10, 10, 65, 112, 105, 75, 101, 121, 65, 117,
              116, 104, 18, 0, 10, 23, 10, 6, 79, 65, 117, 116, 104, 50, 18, 13,
              10, 4, 114, 101, 97, 100, 10, 5, 119, 114, 105, 116, 101, 106, 20,
              10, 14, 120, 45, 105, 114, 114, 101, 118, 101, 114, 115, 105, 98,
              108, 101, 18, 2, 32, 1,
            ]),
          ],
          578365826: [
            new Uint8Array([
              40, 42, 38, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 123, 117, 117, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    getQuery: {
      name: "GetQuery",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              84, 34, 78, 10, 28, 70, 105, 110, 100, 32, 111, 117, 116, 32, 109,
              111, 114, 101, 32, 97, 98, 111, 117, 116, 32, 71, 101, 116, 81,
              117, 101, 114, 121, 18, 46, 104, 116, 116, 112, 115, 58, 47, 47,
              103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 103, 114, 112,
              99, 45, 101, 99, 111, 115, 121, 115, 116, 101, 109, 47, 103, 114,
              112, 99, 45, 103, 97, 116, 101, 119, 97, 121, 88, 1, 98, 0,
            ]),
          ],
          578365826: [
            new Uint8Array([
              46, 18, 44, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 113, 117, 101, 114, 121, 47, 123,
              117, 117, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    getRepeatedQuery: {
      name: "GetRepeatedQuery",
      requestType: ABitOfEverythingRepeated,
      requestStream: false,
      responseType: ABitOfEverythingRepeated,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              249, 3, 18, 246, 3, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108,
              101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101,
              114, 121, 116, 104, 105, 110, 103, 95, 114, 101, 112, 101, 97,
              116, 101, 100, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112, 101,
              97, 116, 101, 100, 95, 102, 108, 111, 97, 116, 95, 118, 97, 108,
              117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112, 101,
              97, 116, 101, 100, 95, 100, 111, 117, 98, 108, 101, 95, 118, 97,
              108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112,
              101, 97, 116, 101, 100, 95, 105, 110, 116, 54, 52, 95, 118, 97,
              108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112,
              101, 97, 116, 101, 100, 95, 117, 105, 110, 116, 54, 52, 95, 118,
              97, 108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101,
              112, 101, 97, 116, 101, 100, 95, 105, 110, 116, 51, 50, 95, 118,
              97, 108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101,
              112, 101, 97, 116, 101, 100, 95, 102, 105, 120, 101, 100, 54, 52,
              95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95,
              114, 101, 112, 101, 97, 116, 101, 100, 95, 102, 105, 120, 101,
              100, 51, 50, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97,
              116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 98, 111,
              111, 108, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97, 116,
              104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 116, 114,
              105, 110, 103, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97,
              116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 98, 121,
              116, 101, 115, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97,
              116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 117, 105,
              110, 116, 51, 50, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112,
              97, 116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 101,
              110, 117, 109, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97,
              116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 102,
              105, 120, 101, 100, 51, 50, 95, 118, 97, 108, 117, 101, 125, 47,
              123, 112, 97, 116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100,
              95, 115, 102, 105, 120, 101, 100, 54, 52, 95, 118, 97, 108, 117,
              101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112, 101, 97,
              116, 101, 100, 95, 115, 105, 110, 116, 51, 50, 95, 118, 97, 108,
              117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112, 101,
              97, 116, 101, 100, 95, 115, 105, 110, 116, 54, 52, 95, 118, 97,
              108, 117, 101, 125,
            ]),
          ],
        },
      },
    },
    deepPathEcho: {
      name: "DeepPathEcho",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              47, 58, 1, 42, 34, 42, 47, 118, 49, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 100, 101, 101, 112, 95, 112, 97, 116, 104, 47, 123,
              115, 105, 110, 103, 108, 101, 95, 110, 101, 115, 116, 101, 100,
              46, 110, 97, 109, 101, 125,
            ]),
          ],
        },
      },
    },
    noBindings: {
      name: "NoBindings",
      requestType: Duration,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    timeout: {
      name: "Timeout",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              21, 18, 19, 47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              116, 105, 109, 101, 111, 117, 116,
            ]),
          ],
        },
      },
    },
    errorWithDetails: {
      name: "ErrorWithDetails",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              30, 18, 28, 47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              101, 114, 114, 111, 114, 119, 105, 116, 104, 100, 101, 116, 97,
              105, 108, 115,
            ]),
          ],
        },
      },
    },
    getMessageWithBody: {
      name: "GetMessageWithBody",
      requestType: MessageWithBody,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              33, 58, 4, 100, 97, 116, 97, 34, 25, 47, 118, 50, 47, 101, 120,
              97, 109, 112, 108, 101, 47, 119, 105, 116, 104, 98, 111, 100, 121,
              47, 123, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    postWithEmptyBody: {
      name: "PostWithEmptyBody",
      requestType: Body,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              41, 58, 1, 42, 34, 36, 47, 118, 50, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 112, 111, 115, 116, 119, 105, 116, 104, 101, 109,
              112, 116, 121, 98, 111, 100, 121, 47, 123, 110, 97, 109, 101, 125,
            ]),
          ],
        },
      },
    },
    checkGetQueryParams: {
      name: "CheckGetQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              65, 18, 63, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 112, 97, 114, 97, 109, 115, 47, 103,
              101, 116, 47, 123, 115, 105, 110, 103, 108, 101, 95, 110, 101,
              115, 116, 101, 100, 46, 110, 97, 109, 101, 125,
            ]),
          ],
        },
      },
    },
    checkNestedEnumGetQueryParams: {
      name: "CheckNestedEnumGetQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              75, 18, 73, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 112, 97, 114, 97, 109, 115, 47, 103,
              101, 116, 47, 110, 101, 115, 116, 101, 100, 95, 101, 110, 117,
              109, 47, 123, 115, 105, 110, 103, 108, 101, 95, 110, 101, 115,
              116, 101, 100, 46, 111, 107, 125,
            ]),
          ],
        },
      },
    },
    checkPostQueryParams: {
      name: "CheckPostQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              75, 58, 13, 115, 105, 110, 103, 108, 101, 95, 110, 101, 115, 116,
              101, 100, 34, 58, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108,
              101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101,
              114, 121, 116, 104, 105, 110, 103, 47, 112, 97, 114, 97, 109, 115,
              47, 112, 111, 115, 116, 47, 123, 115, 116, 114, 105, 110, 103, 95,
              118, 97, 108, 117, 101, 125,
            ]),
          ],
        },
      },
    },
    overwriteRequestContentType: {
      name: "OverwriteRequestContentType",
      requestType: Body,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              24, 50, 22, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110,
              47, 120, 45, 98, 97, 114, 45, 109, 105, 109, 101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              44, 58, 1, 42, 34, 39, 47, 118, 50, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 111, 118, 101, 114, 119, 114, 105, 116, 101, 114,
              101, 113, 117, 101, 115, 116, 99, 111, 110, 116, 101, 110, 116,
              116, 121, 112, 101,
            ]),
          ],
        },
      },
    },
    overwriteResponseContentType: {
      name: "OverwriteResponseContentType",
      requestType: Empty,
      requestStream: false,
      responseType: StringValue,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              18, 58, 16, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110,
              47, 116, 101, 120, 116,
            ]),
          ],
          578365826: [
            new Uint8Array([
              42, 18, 40, 47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              111, 118, 101, 114, 119, 114, 105, 116, 101, 114, 101, 115, 112,
              111, 110, 115, 101, 99, 111, 110, 116, 101, 110, 116, 116, 121,
              112, 101,
            ]),
          ],
        },
      },
    },
    checkExternalPathEnum: {
      name: "CheckExternalPathEnum",
      requestType: MessageWithPathEnum,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              19, 18, 17, 47, 118, 50, 47, 123, 118, 97, 108, 117, 101, 125, 58,
              99, 104, 101, 99, 107,
            ]),
          ],
        },
      },
    },
    checkExternalNestedPathEnum: {
      name: "CheckExternalNestedPathEnum",
      requestType: MessageWithNestedPathEnum,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              19, 18, 17, 47, 118, 51, 47, 123, 118, 97, 108, 117, 101, 125, 58,
              99, 104, 101, 99, 107,
            ]),
          ],
        },
      },
    },
    checkStatus: {
      name: "CheckStatus",
      requestType: Empty,
      requestStream: false,
      responseType: CheckStatusResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              25, 18, 23, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              99, 104, 101, 99, 107, 83, 116, 97, 116, 117, 115,
            ]),
          ],
        },
      },
    },
    postOneofEnum: {
      name: "PostOneofEnum",
      requestType: OneofEnumMessage,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              37, 58, 12, 101, 120, 97, 109, 112, 108, 101, 95, 101, 110, 117,
              109, 34, 21, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101,
              47, 111, 110, 101, 111, 102, 101, 110, 117, 109,
            ]),
          ],
        },
      },
    },
    postRequiredMessageType: {
      name: "PostRequiredMessageType",
      requestType: RequiredMessageTypeRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              36, 58, 1, 42, 34, 31, 47, 118, 49, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 114, 101, 113, 117, 105, 114, 101, 100, 109, 101,
              115, 115, 97, 103, 101, 116, 121, 112, 101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export type AnotherServiceWithNoBindingsDefinition =
  typeof AnotherServiceWithNoBindingsDefinition;
export const AnotherServiceWithNoBindingsDefinition = {
  name: "AnotherServiceWithNoBindings",
  fullName: "proto.examplepb.AnotherServiceWithNoBindings",
  methods: {
    noBindings: {
      name: "NoBindings",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
