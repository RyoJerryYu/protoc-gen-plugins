// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: proto/pathenum/path_enum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pathenum";

export enum PathEnum {
  ABC = "ABC",
  DEF = "DEF",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function pathEnumFromJSON(object: any): PathEnum {
  switch (object) {
    case 0:
    case "ABC":
      return PathEnum.ABC;
    case 1:
    case "DEF":
      return PathEnum.DEF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PathEnum.UNRECOGNIZED;
  }
}

export function pathEnumToNumber(object: PathEnum): number {
  switch (object) {
    case PathEnum.ABC:
      return 0;
    case PathEnum.DEF:
      return 1;
    case PathEnum.UNRECOGNIZED:
    default:
      return -1;
  }
}

/**
 * Ignoring lint warnings as this enum type exist to validate proper functionality
 * for projects that don't follow these lint rules.
 * buf:lint:ignore ENUM_PASCAL_CASE
 */
export enum snakeCaseForImport {
  /** value_x - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_x = "value_x",
  /** value_y - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_y = "value_y",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function snakeCaseForImportFromJSON(object: any): snakeCaseForImport {
  switch (object) {
    case 0:
    case "value_x":
      return snakeCaseForImport.value_x;
    case 1:
    case "value_y":
      return snakeCaseForImport.value_y;
    case -1:
    case "UNRECOGNIZED":
    default:
      return snakeCaseForImport.UNRECOGNIZED;
  }
}

export function snakeCaseForImportToNumber(object: snakeCaseForImport): number {
  switch (object) {
    case snakeCaseForImport.value_x:
      return 0;
    case snakeCaseForImport.value_y:
      return 1;
    case snakeCaseForImport.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface MessagePathEnum {}

export enum MessagePathEnum_NestedPathEnum {
  GHI = "GHI",
  JKL = "JKL",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function messagePathEnum_NestedPathEnumFromJSON(
  object: any,
): MessagePathEnum_NestedPathEnum {
  switch (object) {
    case 0:
    case "GHI":
      return MessagePathEnum_NestedPathEnum.GHI;
    case 1:
    case "JKL":
      return MessagePathEnum_NestedPathEnum.JKL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessagePathEnum_NestedPathEnum.UNRECOGNIZED;
  }
}

export function messagePathEnum_NestedPathEnumToNumber(
  object: MessagePathEnum_NestedPathEnum,
): number {
  switch (object) {
    case MessagePathEnum_NestedPathEnum.GHI:
      return 0;
    case MessagePathEnum_NestedPathEnum.JKL:
      return 1;
    case MessagePathEnum_NestedPathEnum.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface MessageWithPathEnum {
  value: PathEnum;
}

export interface MessageWithNestedPathEnum {
  value: MessagePathEnum_NestedPathEnum;
}

function createBaseMessagePathEnum(): MessagePathEnum {
  return {};
}

export const MessagePathEnum: MessageFns<MessagePathEnum> = {
  encode(
    _: MessagePathEnum,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessagePathEnum {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessagePathEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MessagePathEnum>): MessagePathEnum {
    return MessagePathEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MessagePathEnum>): MessagePathEnum {
    const message = createBaseMessagePathEnum();
    return message;
  },
};

function createBaseMessageWithPathEnum(): MessageWithPathEnum {
  return { value: PathEnum.ABC };
}

export const MessageWithPathEnum: MessageFns<MessageWithPathEnum> = {
  encode(
    message: MessageWithPathEnum,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== PathEnum.ABC) {
      writer.uint32(8).int32(pathEnumToNumber(message.value));
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MessageWithPathEnum {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageWithPathEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = pathEnumFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MessageWithPathEnum>): MessageWithPathEnum {
    return MessageWithPathEnum.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageWithPathEnum>): MessageWithPathEnum {
    const message = createBaseMessageWithPathEnum();
    message.value = object.value ?? PathEnum.ABC;
    return message;
  },
};

function createBaseMessageWithNestedPathEnum(): MessageWithNestedPathEnum {
  return { value: MessagePathEnum_NestedPathEnum.GHI };
}

export const MessageWithNestedPathEnum: MessageFns<MessageWithNestedPathEnum> =
  {
    encode(
      message: MessageWithNestedPathEnum,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.value !== MessagePathEnum_NestedPathEnum.GHI) {
        writer
          .uint32(8)
          .int32(messagePathEnum_NestedPathEnumToNumber(message.value));
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MessageWithNestedPathEnum {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMessageWithNestedPathEnum();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.value = messagePathEnum_NestedPathEnumFromJSON(
              reader.int32(),
            );
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<MessageWithNestedPathEnum>,
    ): MessageWithNestedPathEnum {
      return MessageWithNestedPathEnum.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<MessageWithNestedPathEnum>,
    ): MessageWithNestedPathEnum {
      const message = createBaseMessageWithNestedPathEnum();
      message.value = object.value ?? MessagePathEnum_NestedPathEnum.GHI;
      return message;
    },
  };

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
