package gen

import (
	"fmt"

	"github.com/RyoJerryYu/protoc-gen-pluginx/pkg/pluginutils"
	"github.com/RyoJerryYu/protoc-gen-pluginx/pkg/protobufx"
	"google.golang.org/protobuf/compiler/protogen"
)

type Options struct{}

type Generator struct {
	Options
	pluginutils.GenerateOptions
}

func (g *Generator) ApplyTemplate() error {
	g.applyMessages(g.F.Messages)
	return nil
}

func (g *Generator) applyMessages(msgs []*protogen.Message) {
	for _, m := range msgs {
		if m.Desc.IsMapEntry() {
			continue
		}

		for _, f := range m.Fields {
			g.applyFieldSetter(m, f)
		}
		g.applyMessages(m.Messages)
	}
}

func (g *Generator) applyFieldSetter(m *protogen.Message, f *protogen.Field) {
	// Setter for parent oneof
	// Only for the first field in the oneof
	if oneof := f.Oneof; oneof != nil && oneof.Fields[0] == f && !oneof.Desc.IsSynthetic() {
		ss := []string{fmt.Sprintf(" Types that are assignable to %s:\n", oneof.GoName)}
		for _, field := range oneof.Fields {
			ss = append(ss, "\t*"+field.GoIdent.GoName+"\n")
		}
		g.PComment(ss...)
		g.Pf(`func (msg *%s) Set%s(v %s) {
	msg.%s = v
}
`,
			m.GoIdent.GoName,
			oneof.GoName,
			protobufx.OneOfInterfaceName(oneof),
			oneof.GoName,
		)
	}

	if f.Desc.IsWeak() {
		// name = protobufx.WeakFieldPrefix_goname + name
		// Weak Fields setter are already generated by the protoc-gen-go
		return
	}

	// Setter for oneof field
	if f.Oneof != nil && !f.Oneof.Desc.IsSynthetic() {
		goType, _ := protobufx.FieldGoType(g.W, f)
		g.PCommentf("Set%s sets the value of the field %s", f.GoName, f.GoName)
		g.Pf(`func (msg *%s) Set%s(v %s) {
			msg.Set%s(&%s{
				%s: v,
			})
		}
		`,
			m.GoIdent.GoName,
			f.GoName,
			goType,
			f.Oneof.GoName,
			f.GoIdent.GoName,
			f.GoName,
		)
		return
	}

	goType, pointer := protobufx.FieldGoType(g.W, f)
	if pointer {
		goType = "*" + goType
	}
	name := f.GoName
	g.PCommentf("Set%s sets the value of the field %s", f.GoName, f.GoName)
	g.Pf(`func (msg *%s) Set%s(v %s) {
	msg.%s = v
}
`,
		m.GoIdent.GoName,
		name,
		goType,
		name,
	)
}
